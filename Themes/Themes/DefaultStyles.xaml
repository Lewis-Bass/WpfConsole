<ResourceDictionary   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"                     
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:System="clr-namespace:System;assembly=mscorlib"
					mc:Ignorable="d">
	
   

	<!-- *********************** -->
	<!-- ******* BRUSHES ******* -->
	<!-- *********************** -->

	<!-- *** Channel Color Brushes *** -->
	<!-- input channels -->
	<SolidColorBrush x:Key="MicrophoneColorBrush" Color="#FF4E9969"/>
	<SolidColorBrush x:Key="BasicMicrophoneColorBrush" Color="#FF2EBD7A"/>
	<SolidColorBrush x:Key="StandardMicrophoneColorBrush" Color="#FF9CBA8F"/>
	<SolidColorBrush x:Key="DialogMicrophoneColorBrush" Color="#FF5797AA"/>
	<SolidColorBrush x:Key="LineInputColorBrush" Color="#FF736144"/>
	<SolidColorBrush x:Key="BeamFormerColorBrush" Color="#FF2EA38A"/>
	<SolidColorBrush x:Key="TelcoRxColorBrush" Color="#FF2E8AB7"/>
	<SolidColorBrush x:Key="RoomInputColorBrush" Color="#FFC8C5AB"/>
	<SolidColorBrush x:Key="DanteInputColorBrush" Color="#FF9D9275"/>
	<SolidColorBrush x:Key="VoIPRxColorBrush" Color="#FF2E578A"/>
	<SolidColorBrush x:Key="USBRxColorBrush" Color="#FF3366CC"/>
	<SolidColorBrush x:Key="SkypeRxColorBrush" Color="#FF75AB00"/>
	<SolidColorBrush x:Key="BluetoothRxColorBrush" Color="#FF75AB00"/>
	<SolidColorBrush x:Key="AuxRxColorBrush" Color="#FF9D9275"/>


	<!-- input groups -->
	<SolidColorBrush x:Key="MicrophoneGroupColorBrush" Color="#FF4E9969"/>
	<SolidColorBrush x:Key="BasicMicrophoneGroupColorBrush" Color="#FF2EBD7A"/>
	<SolidColorBrush x:Key="StandardMicrophoneGroupColorBrush" Color="#FF9CBA8F"/>
	<SolidColorBrush x:Key="DialogMicrophoneGroupColorBrush" Color="#FF5797AA"/>
	<SolidColorBrush x:Key="LineInputGroupColorBrush" Color="#FF736144"/>
	<SolidColorBrush x:Key="BeamFormerGroupColorBrush" Color="#FF2EA38A"/>
	<SolidColorBrush x:Key="TelcoRxGroupColorBrush" Color="#FF2E8AB7"/>
	<SolidColorBrush x:Key="RoomInputGroupColorBrush" Color="#FFC8C5AB"/>
	<SolidColorBrush x:Key="DanteInputGroupColorBrush" Color="#FF9D9275"/>
	<SolidColorBrush x:Key="VoIPRxGroupColorBrush" Color="#FF2E578A"/>
	<SolidColorBrush x:Key="USBRxGroupColorBrush" Color="#FF3366CC"/>
	<SolidColorBrush x:Key="SkypeRxGroupColorBrush" Color="#FF75AB00"/>
	<SolidColorBrush x:Key="BluetoothRxGroupColorBrush" Color="#FF75AB00"/>
	<SolidColorBrush x:Key="AuxRxGroupColorBrush" Color="#FF9D9275"/>

	<!-- mix channels -->
	<SolidColorBrush x:Key="ProcBlockColorBrush" Color="#FFCC6666"/>
	<SolidColorBrush x:Key="FaderColorBrush" Color="#FF00CC99"/>

	<!-- mix groups -->
	<SolidColorBrush x:Key="ProcBlockGroupColorBrush" Color="#FFCC6666"/>
	<SolidColorBrush x:Key="FaderGroupColorBrush" Color="#FF00CC99"/>

	<!-- output channels -->
	<SolidColorBrush x:Key="OutputColorBrush" Color="#FFCC3300"/>
	<SolidColorBrush x:Key="OutputGRColorBrush" Color="#FFCC3300"/>
	<SolidColorBrush x:Key="SpeakerOutputColorBrush" Color="#FFCC4939"/>
	<SolidColorBrush x:Key="TelcoTxColorBrush" Color="#FFFF9966"/>
	<SolidColorBrush x:Key="RoomOutputColorBrush" Color="#FFCC6666"/>
	<SolidColorBrush x:Key="DanteOutputColorBrush" Color="#FFCC6633"/>
	<SolidColorBrush x:Key="VoIPTxColorBrush" Color="#FFFF9933"/>
	<SolidColorBrush x:Key="USBTxColorBrush" Color="#FFFFB30D"/>
	<SolidColorBrush x:Key="SkypeTxColorBrush" Color="#FF1588BA"/>
	<SolidColorBrush x:Key="BluetoothTxColorBrush" Color="#FF1588BA"/>
	<SolidColorBrush x:Key="AuxTxColorBrush" Color="#FFCC6633"/>

	<!-- output groups -->
	<SolidColorBrush x:Key="OutputGroupColorBrush" Color="#FFCC3300"/>
	<SolidColorBrush x:Key="OutputGRGroupColorBrush" Color="#FFCC3300"/>
	<SolidColorBrush x:Key="SpeakerOutputGroupColorBrush" Color="#FFCC4939"/>
	<SolidColorBrush x:Key="TelcoTxGroupColorBrush" Color="#FFFF9966"/>
	<SolidColorBrush x:Key="RoomOutputGroupColorBrush" Color="#FFCC6666"/>
	<SolidColorBrush x:Key="DanteOutputGroupColorBrush" Color="#FFCC6633"/>
	<SolidColorBrush x:Key="VoIPTxGroupColorBrush" Color="#FFFF9933"/>
	<SolidColorBrush x:Key="USBTxGroupColorBrush" Color="#FFFFB30D"/>
	<SolidColorBrush x:Key="SkypeTxGroupColorBrush" Color="#FF1588BA"/>
	<SolidColorBrush x:Key="BluetoothTxGroupColorBrush" Color="#FF1588BA"/>
	<SolidColorBrush x:Key="AuxTxGroupColorBrush" Color="#FFCC6633"/>

	<!-- gating/crosspoint -->
	<SolidColorBrush x:Key="GatingGroupColorBrush" Color="#FF999966"/>
	<SolidColorBrush x:Key="CrosspointColorBrush" Color="#FFFF6633"/>

	<!-- Channel Specific Brushes -->
	<SolidColorBrush x:Key="Channel.Static.ForegroundBrush" Color="#FFFFFFFF"/>
	<SolidColorBrush x:Key="Channel.Disabled.ForegroundBrush" Color="#FFBBBBBB"/>

	<!-- *** Reference Brushes *** -->
	<SolidColorBrush x:Key="CustomReferenceColorBrush" Color="#FF898900"/>
	<SolidColorBrush x:Key="StandardReferenceColorBrush" Color="#FF666600"/>
	<SolidColorBrush x:Key="ExclusionReferenceColorBrush" Color="#FF999933"/>

	<!-- *** Matrix Brushes *** -->
	<SolidColorBrush x:Key="Matrix.Cell.NonAEC.BackgroundBrush" Color="White"/>
	<SolidColorBrush x:Key="Matrix.Cell.AEC.BackgroundBrush" Color="LightGray"/>
	<SolidColorBrush x:Key="Matrix.Cell.Static.BackgroundBrush" Color="#FFFFFF"/>
	<SolidColorBrush x:Key="Matrix.Cell.Selected.BorderBrush" Color="#000000"/>
	<SolidColorBrush x:Key="Matrix.Cell.GatedBrush" Color="DarkGoldenrod"/>
	<SolidColorBrush x:Key="Matrix.Cell.NonGatedBrush" Color="Blue"/>
	<SolidColorBrush x:Key="Matrix.Cell.PreAECBrush" Color="DarkMagenta"/>
	<SolidColorBrush x:Key="Matrix.Cell.CrosspointBrush" Color="DarkGreen"/>
	<SolidColorBrush x:Key="Matrix.Cell.MixedBrush" Color="DarkBlue"/>
	<SolidColorBrush x:Key="Matrix.Cell.ClearBrush" Color="White"/>
	<SolidColorBrush x:Key="Matrix.Cell.BackgroundBrush" Color="DarkGray"/>
	<SolidColorBrush x:Key="Matrix.Cell.MixedBackgroundBrush" Color="DarkGray"/>
	<SolidColorBrush x:Key="Matrix.Cell.UnavailableBrush" Color="#444444"/>
	<SolidColorBrush x:Key="Matrix.Cell.MutedBorderBrush" Color="Red"/>
	<SolidColorBrush x:Key="Matrix.Cell.MixedCenterBrush" Color="White"/>
	<SolidColorBrush x:Key="Matrix.Cell.PresetDogEarBrush" Color="Black"/>
	<SolidColorBrush x:Key="Matrix.SelectionRectBrush" Color="#F77857"/>

	<!-- *** FlowView Brushes *** -->
	<SolidColorBrush x:Key="FlowView.NonCanvas.BackgroundBrush" Color="{DynamicResource FlowView.NonCanvas.Background.Color}"/>

	<!-- Possibly need to be reassigned -->
	<SolidColorBrush x:Key="MarriageInstructionsColorBrush" Color="#FFBAC3C4"/>

	<!-- *** Menu Brushes *** -->
	<SolidColorBrush x:Key="Menu.Static.BackgroundBrush" Color="{DynamicResource MainMenu.Background.Color}"/>
	<SolidColorBrush x:Key="Menu.Static.BorderBrush" Color="{DynamicResource MainMenu.Background.Color}"/>
	<SolidColorBrush x:Key="Submenu.Static.BackgroundBrush" Color="#FFF5F5F5"/>
	<SolidColorBrush x:Key="Menu.Highlight.BackgroundBrush" Color="#D1FE863F"/>
	<SolidColorBrush x:Key="Menu.Disabled.ForegroundBrush" Color="#888"/>
	<SolidColorBrush x:Key="Menu.Static.GlyphBrush" Color="#444"/>

	<!-- Audio Presence Brushes -->
	<LinearGradientBrush x:Key="AudioPresenceNotPresent" EndPoint="0.483,2.182" MappingMode="RelativeToBoundingBox" StartPoint="0.512,-0.366">
		<GradientStop Color="#FF093E01" Offset="1"/>
		<GradientStop Color="#FF003208" Offset="0.008"/>
		<GradientStop Color="#FF1D4F0D" Offset="0.53"/>
		<GradientStop Color="#FF2F4F1F" Offset="0.252"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="AudioPresencePresent" EndPoint="0.483,2.182" MappingMode="RelativeToBoundingBox" StartPoint="0.512,-0.366">
		<GradientStop Color="#FF00FF46" Offset="1"/>
		<GradientStop Color="#FF00FF23" Offset="0.008"/>
		<GradientStop Color="#FF5BFF2B" Offset="0.53"/>
		<GradientStop Color="#FF81FF65" Offset="0.252"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="AudioPresenceClipping" EndPoint="0.483,2.182" MappingMode="RelativeToBoundingBox" StartPoint="0.512,-0.366">
		<GradientStop Color="Red" Offset="1"/>
		<GradientStop Color="Red" Offset="0.008"/>
		<GradientStop Color="#FFFF2B2B" Offset="0.53"/>
		<GradientStop Color="#FFFF6565" Offset="0.252"/>
	</LinearGradientBrush>

	<!-- *** Indeterminate/Runtime Indicator Brushes *** -->
	<LinearGradientBrush x:Key="IndeterminateControlBackgroundBrush" EndPoint="55.44,152.344" StartPoint="59.3,154.6" SpreadMethod="Repeat" MappingMode="Absolute">
		<GradientStop Color="{DynamicResource IndeterminateBackgroundLightColor}"/>
		<GradientStop Color="{DynamicResource IndeterminateBackgroundDarkColor}" Offset="1"/>
		<GradientStop Color="{DynamicResource IndeterminateBackgroundDarkColor}" Offset="0.496"/>
		<GradientStop Color="{DynamicResource IndeterminateBackgroundLightColor}" Offset="0.488"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="RuntimeValuesBorderBrush" EndPoint="55.44,152.344" StartPoint="59.3,154.6" SpreadMethod="Repeat" MappingMode="Absolute">
		<GradientStop Color="#FFF3FF00"/>
		<GradientStop Color="#FF0CFF00" Offset="1"/>
		<GradientStop Color="#FF0CFF00" Offset="0.496"/>
		<GradientStop Color="#FFF3FF00" Offset="0.488"/>
	</LinearGradientBrush>

	<!-- *** C1_WPF Brushes *** -->
	<LinearGradientBrush x:Key="C1_WPF.Button.BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#F3F3F3" Offset="0"/>
		<GradientStop Color="#EBEBEB" Offset="0.5"/>
		<GradientStop Color="#DDDDDD" Offset="0.5"/>
		<GradientStop Color="#CDCDCD" Offset="1"/>
	</LinearGradientBrush>

	<!-- *** StandardView Brushes *** -->
	<SolidColorBrush x:Key="StandardView.ForegroundBrush" Color="{DynamicResource NormalView.Foreground.Color}"/>
	<SolidColorBrush x:Key="StandardView.BackgroundBrush" Color="{DynamicResource NormalView.Background.Color}"/>
	<SolidColorBrush x:Key="StandardView.BorderBrush" Color="{DynamicResource NormalView.Background.Color}"/>
	<SolidColorBrush x:Key="StandardView.Disabled.ForegroundBrush" Color="{DynamicResource NormalView.Disabled.Foreground.Color}"/>

	<!-- *** Pullout Brushes *** -->
	<SolidColorBrush x:Key="Pullout.ForegroundBrush" Color="#FFFFFF"/>
	<SolidColorBrush x:Key="Pullout.BackgroundBrush" Color="#F77857"/>
	<SolidColorBrush x:Key="Pullout.BorderBrush" Color="#FFFFFF"/>
	<SolidColorBrush x:Key="Pullout.Disabled.ForegroundBrush" Color="{DynamicResource NormalView.Disabled.Foreground.Color}"/>

	<!-- *** Dialog Brushes *** -->
	<SolidColorBrush x:Key="Dialog.BackgroundBrush" Color="{DynamicResource Dialog.Background.Color}"/>
	<SolidColorBrush x:Key="Dialog.BorderBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="Dialog.Bottom.BackgroundBrush" Color="#FF6A635D"/>

	<!-- *** Container Brushes *** -->
	<SolidColorBrush x:Key="Container.Header.BackgroundBrush" Color="{DynamicResource ListControl.Header.Background.Color}"/>
	<SolidColorBrush x:Key="Container.BackgroundBrush" Color="{DynamicResource ListControl.Background.Color}"/>
	<SolidColorBrush x:Key="Container.BorderBrush" Color="{DynamicResource ListControl.Border.Color}"/>

	<!-- *** Special Text Brushes *** -->
	<SolidColorBrush x:Key="Text.ErrorBrush" Color="Red"/>

	<!-- *** PropertySelector Brushes *** -->
	<SolidColorBrush x:Key="PropertySelector.GroupHeader.ForegroundBrush" Color="#FF4C4743"/>
	<SolidColorBrush x:Key="PropertySelector.Item.ForegroundBrush" Color="Black"/>
	<SolidColorBrush x:Key="PropertySelector.Selected.Item.ForegroundBrush" Color="White"/>

	<!-- *** Macro Recorder Brushes ***-->
	<SolidColorBrush x:Key="MacroRecorder.Command.Static.BackgroundBrush" Color="#FFFFFF"/>

	<!-- *** TabControl Brushes ***-->
	<SolidColorBrush x:Key="TabControl.Static.BackgroundBrush" Color="#FFFFFF"/>
	<SolidColorBrush x:Key="TabControl.Static.BorderBrush" Color="{DynamicResource TabItem.Static.Border.Color}"/>
	<SolidColorBrush x:Key="TabControl.Static.ForegroundBrush" Color="Green"/>

	<!-- *** TabItem Brushes *** -->
	<SolidColorBrush x:Key="TabItem.Static.ForegroundBrush" Color="{DynamicResource TabItem.Static.Foreground.Color}"/>
	<!--<SolidColorBrush x:Key="TabItem.Hot.Edge.Brush" Color="#F77857"/>-->
    <SolidColorBrush x:Key="TabItem.Hot.Edge.Brush" Color="#8D1448"/>
    <SolidColorBrush x:Key="TabItem.Hot.BackgroundBrush" Color="#9F665B"/>
	<SolidColorBrush x:Key="TabItem.Hot.ForegroundBrush" Color="#000000"/>
	<SolidColorBrush x:Key="TabItem.Selected.ForegroundBrush" Color="White"/>
	<SolidColorBrush x:Key="TabItem.Disabled.BackgroundBrush" Color="{DynamicResource TabItem.Disabled.Background.Color}"/>
	<SolidColorBrush x:Key="TabItem.Disabled.BorderBrush" Color="{DynamicResource TabItem.Disabled.Border.Color}"/>
	<SolidColorBrush x:Key="TabItem.Disabled.ForegroundBrush" Color="{DynamicResource TabItem.Disabled.Foreground.Color}"/>

	<!-- *** ToolbarButton Brushes ***-->
	<SolidColorBrush x:Key="ToolbarButton.Static.BorderBrush" Color="#FF707070"/>
	<SolidColorBrush x:Key="ToolbarButton.Static.ForegroundBrush" Color="#000000"/>
	<SolidColorBrush x:Key="ToolbarButton.MouseOver.BorderBrush" Color="#FFFFBC94"/>
	<LinearGradientBrush x:Key="ToolBarButton.Pressed.BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFFFBC94"/>
		<GradientStop Color="#FFFFBC94" Offset=".5"/>
		<GradientStop Color="#FFFE863F" Offset=".5"/>
		<GradientStop Color="#FFFE863F" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolBarButton.Pressed.BorderBrush" EndPoint="0.936,0.917" StartPoint="0.07,0.056">
		<GradientStop Color="#FF0A121B" Offset="0.535"/>
		<GradientStop Color="#FF234874" Offset="0.843"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolbarButton.MouseOver.BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFFFBC94" Offset="0.15"/>
		<GradientStop Color="#FFFFBC94" Offset=".5"/>
		<GradientStop Color="#FFFE863F" Offset=".5"/>
		<GradientStop Color="#FFFE863F" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolBarButton.Horizontal.BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFFFFF" Offset="0"/>
		<GradientStop Color="#FFFBFF" Offset="0.5"/>
		<GradientStop Color="#F7F7F7" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolBarButton.Vertical.BackgroundBrush" EndPoint="1,0" StartPoint="0,0">
		<GradientStop Color="#FFFFFF" Offset="0"/>
		<GradientStop Color="#FFFBFF" Offset="0.5"/>
		<GradientStop Color="#F7F7F7" Offset="1"/>
	</LinearGradientBrush>

	<!-- *** Toolbar Brushes ***-->
	<SolidColorBrush x:Key="Toolbar.Static.BackgroundBrush" Color="{DynamicResource Nav.Background.Color}"/>
	<SolidColorBrush x:Key="Toolbar.Static.BorderBrush" Color="{DynamicResource Nav.Border.Color}"/>
	<LinearGradientBrush x:Key="ToolBar.Horizontal.BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFFFFF" Offset="0"/>
		<GradientStop Color="#FFFBFF" Offset="0.5"/>
		<GradientStop Color="#F7F7F7" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolBar.Vertical.BackgroundBrush" EndPoint="1,0" StartPoint="0,0">
		<GradientStop Color="#FFFFFF" Offset="0"/>
		<GradientStop Color="#FFFBFF" Offset="0.5"/>
		<GradientStop Color="#F7F7F7" Offset="1"/>
	</LinearGradientBrush>

	<!-- *** GroupBox Brushes *** -->
	<SolidColorBrush x:Key="GroupBox.Static.BorderBrush" Color="{DynamicResource GroupBox.Border.Color}"/>
	<SolidColorBrush x:Key="GroupBox.Static.ForegroundBrush" Color="{DynamicResource GroupBox.Header.Color}"/>

	<!-- *** DogEar Brushes ***-->
	<SolidColorBrush x:Key="DogEar.CheckBox.Static.GlyphBrush" Color="White"/>
	<LinearGradientBrush x:Key="DogEarCheckBoxNormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#CCC" Offset="0.0"/>
		<GradientStop Color="#444" Offset="1.0"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="DogEar.CheckBox.MouseOver.BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFF" Offset="0.0"/>
		<GradientStop Color="#FF84BCFF" Offset="1.0"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="DogEar.CheckBox.Pressed.BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#BBB" Offset="0.0"/>
		<GradientStop Color="#EEE" Offset="0.1"/>
		<GradientStop Color="#FF84BCFF" Offset="0.9"/>
		<GradientStop Color="#FFF" Offset="1.0"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="DogEar.CheckBox.Pressed.BorderBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#444" Offset="0.0"/>
		<GradientStop Color="#888" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="DogEar.CheckBox.Disabled.BackgroundBrush" Color="#EEE"/>
	<SolidColorBrush x:Key="DogEar.CheckBox.Disabled.BorderBrush" Color="#AAA"/>

	<!-- *** GRONLY Brushes *** --><!--
	<SolidColorBrush x:Key="GRONLY_MiniAppSelectedBrush" Color="#FFFF6306"/>
	<SolidColorBrush x:Key="GRONLY_MiniAppHoverBrush" Color="#FFFE863F"/>
	<SolidColorBrush x:Key="GRONLY_MiniAppMouseDownBrush" Color="#FFFDA16A"/>
	<SolidColorBrush x:Key="GRONLY_MiniAppBackgroundBrush" Color="{DynamicResource ConvergeMatrix_MiniAppBackgroundBrush}"/>
	<SolidColorBrush x:Key="GRONLY_MiniAppForegroundBrush" Color="#FFFFFEFB"/>
	<SolidColorBrush x:Key="GRONLY_NavigationHeaderBrush" Color="White"/>
	<SolidColorBrush x:Key="GRONLY_NavigationDividerForegroundBrush" Color="#FF2C2A27"/>
	<SolidColorBrush x:Key="GRONLY_NavigationBackgroundBrush" Color="{DynamicResource Nav.Background.Color}"/>
	<SolidColorBrush x:Key="GRONLY_NavigationHeaderBackgroundBrush" Color="#FF2C2A27"/>
	<SolidColorBrush x:Key="GRONLY_LightTextForegroundBrush" Color="#FFDFF3FF"/>-->

	<!-- *** Button Brushes *** -->
	<SolidColorBrush x:Key="Button.Static.BackgroundBrush" Color="{DynamicResource ButtonControl.Background.Color}"/>
	<SolidColorBrush x:Key="Button.Static.BorderBrush" Color="{DynamicResource ButtonControl.Border.Color}"/>
	<SolidColorBrush x:Key="Button.Static.ForegroundBrush" Color="#FFFFFF"/>
	<SolidColorBrush x:Key="Button.Focus.BorderBrush" Color="Black" Opacity="1"/>
	<SolidColorBrush x:Key="Button.MouseOver.BackgroundBrush" Color="{DynamicResource ButtonControl.MouseOver.Background.Color}"/>
	<SolidColorBrush x:Key="Button.Pressed.BackgroundBrush" Color="#FF50626E"/>
	<SolidColorBrush x:Key="Button.Pressed.BorderBrush" Color="#FF50626E"/>
	<SolidColorBrush x:Key="Button.Disabled.BackgroundBrush" Color="{DynamicResource ButtonControl.Disabled.Color}"/>
	<SolidColorBrush x:Key="Button.Disabled.BorderBrush" Color="{DynamicResource ButtonControl.Disabled.Color}"/>
	<SolidColorBrush x:Key="Button.Disabled.ForegroundBrush" Color="{DynamicResource ButtonControl.Disabled.Text.Color}"/>

	<!-- *** Vector Button Brushes *** -->
	<SolidColorBrush x:Key="VectorButton.FillBrush" Color="{DynamicResource VectorButton.Fill.Color}"/>

	<!-- *** RepeatButton Brushes *** -->
	<SolidColorBrush x:Key="RepeatButton.Static.BackgroundBrush" Color="#FF44555F"/>
	<SolidColorBrush x:Key="RepeatButton.Static.BorderBrush" Color="#FF44555F"/>
	<LinearGradientBrush x:Key="RepeatButton.Focused.BorderBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#777" Offset="0.0"/>
		<GradientStop Color="#000" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="RepeatButton.MouseOver.BackgroundBrush" Color="#FF5B6B72"/>
	<SolidColorBrush x:Key="RepeatButton.Pressed.BackgroundBrush" Color="#FF50626E"/>
	<SolidColorBrush x:Key="RepeatButton.Pressed.BorderBrush" Color="#FF50626E"/>
	<SolidColorBrush x:Key="RepeatButton.Disabled.BackgroundBrush" Color="{DynamicResource ButtonControl.Disabled.Color}"/>
	<SolidColorBrush x:Key="RepeatButton.Disabled.BorderBrush" Color="{DynamicResource ButtonControl.Disabled.Color}"/>
	<SolidColorBrush x:Key="RepeatButton.Disabled.ForegroundBrush" Color="#FFAFB4B8"/>

	<!-- *** ImageButton Brushes *** -->
	<SolidColorBrush x:Key="ImageButton.Focus.BorderBrush" Color="Black" Opacity="1"/>
	<SolidColorBrush x:Key="ImageButtonLightForegroundBrush" Color="White"/>
	<SolidColorBrush x:Key="ImageButtonDarkForegroundBrush" Color="Black"/>
	<SolidColorBrush x:Key="ImageButton.Static.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="ImageButton.Static.BorderBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="ImageButton.MouseOver.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="ImageButton.MouseOver.BorderBrush" Color="White"/>
	<SolidColorBrush x:Key="ImageButton.Pressed.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="ImageButton.Pressed.BorderBrush" Color="White"/>
	<SolidColorBrush x:Key="ImageButton.Disabled.BackgroundBrush" Color="#FFD0D5D8"/>
	<SolidColorBrush x:Key="ImageButton.Disabled.BorderBrush" Color="#FFD0D5D8"/>
	<SolidColorBrush x:Key="ImageButton.Disabled.ForegroundBrush" Color="#FFAFB4B8"/>

	<!-- *** RadioButton Brushes *** -->
	<SolidColorBrush x:Key="RadioButton.Static.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="RadioButton.Static.BorderBrush" Color="{DynamicResource NormalView.Foreground.Color}"/>
	<SolidColorBrush x:Key="RadioButton.Static.ForegroundBrush" Color="{DynamicResource NormalView.Foreground.Color}"/>
	<SolidColorBrush x:Key="RadioButton.Static.GlyphBrush" Color="{DynamicResource NormalView.Foreground.Color}"/>
	<SolidColorBrush x:Key="RadioButton.Checked.BackgroundBrush" Color="#FF44555D"/>
	<SolidColorBrush x:Key="RadioButton.Pressed.BackgroundBrush" Color="#FF44555D"/>
	<SolidColorBrush x:Key="RadioButton.Disabled.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="RadioButton.Disabled.GlyphBrush" Color="{DynamicResource NormalView.Disabled.Foreground.Color}"/>
	<SolidColorBrush x:Key="RadioButton.Disabled.ForegroundBrush" Color="{DynamicResource NormalView.Disabled.Foreground.Color}"/>

	<!-- *** CheckBox Brushes *** -->
	<SolidColorBrush x:Key="CheckBox.Static.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="CheckBox.Static.BorderBrush" Color="{DynamicResource NormalView.Foreground.Color}"/>
	<SolidColorBrush x:Key="CheckBox.Static.ForegroundBrush" Color="{DynamicResource NormalView.Foreground.Color}"/>
	<SolidColorBrush x:Key="CheckBox.Static.GlyphBrush" Color="{DynamicResource NormalView.Foreground.Color}"/>
	<SolidColorBrush x:Key="CheckBox.Checked.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="CheckBox.Pressed.BackgroundBrush" Color="#FF44555D"/>
	<SolidColorBrush x:Key="CheckBox.Disabled.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="CheckBox.Disabled.GlyphBrush" Color="{DynamicResource NormalView.Disabled.Foreground.Color}"/>
	<SolidColorBrush x:Key="CheckBox.Disabled.ForegroundBrush" Color="{DynamicResource NormalView.Disabled.Foreground.Color}"/>
	<SolidColorBrush x:Key="SelectedCheckBox.Static.BackgroundBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="SelectedCheckBox.Static.BorderBrush" Color="{DynamicResource ListControl.Selected.Text.Color}"/>
	<SolidColorBrush x:Key="SelectedCheckBox.Static.ForegroundBrush" Color="{DynamicResource ListControl.Selected.Text.Color}"/>

	<!-- *** ComboBox Brushes *** -->
	<SolidColorBrush x:Key="ComboBox.Static.BackgroundBrush" Color="{DynamicResource ComboBox.Static.Background.Color}"/>
	<SolidColorBrush x:Key="ComboBox.Static.BorderBrush" Color="{DynamicResource ComboBox.Static.Border.Color}"/>
	<SolidColorBrush x:Key="ComboBox.Static.ForegroundBrush" Color="{DynamicResource ComboBox.Static.Foreground.Color}"/>
	<SolidColorBrush x:Key="ComboBox.Static.GlyphBrush" Color="#000000"/>
	<SolidColorBrush x:Key="ComboBox.MouseOver.GlyphBrush" Color="#35434B"/>
	<SolidColorBrush x:Key="ComboBox.MouseOver.BorderBrush" Color="#7EB4EA"/>
	<SolidColorBrush x:Key="ComboBox.Checked.BackgroundBrush" Color="#50626E"/>
	<SolidColorBrush x:Key="ComboBox.Checked.GlyphBrush" Color="#000000"/>
	<SolidColorBrush x:Key="ComboBox.DropDown.BackgroundBrush" Color="#FFF"/>
	<SolidColorBrush x:Key="ComboBox.DropDown.BorderBrush" Color="#888"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.BackgroundBrush" Color="{DynamicResource ComboBox.Disabled.Background.Color}"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.BorderBrush" Color="#C0C5C8"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.GlyphBrush" Color="{DynamicResource ComboBox.Disabled.Foreground.Color}"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.ForegroundBrush" Color="{DynamicResource ComboBox.Disabled.Foreground.Color}"/>
	<SolidColorBrush x:Key="ComboBox.Static.Splitborder.BackgroundBrush" Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Static.Splitborder.BorderBrush" Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Pressed.GlyphBrush" Color="#FF000000"/>

	<!-- *** ComboBoxItem Brushes *** -->
	<SolidColorBrush x:Key="ComboBoxItem.Highlighted.BackgroundBrush" Color="#DDD"/>
	<SolidColorBrush x:Key="ComboBoxItem.Disabled.ForegroundBrush" Color="#A5A8AB"/>

	<!-- *** TextBox Brushes *** -->
	<SolidColorBrush x:Key="TextBox.Static.BackgroundBrush" Color="{DynamicResource TextBox.Static.Background.Color}"/>
	<SolidColorBrush x:Key="TextBox.Static.BorderBrush" Color="{DynamicResource TextBox.Static.Border.Color}"/>
	<SolidColorBrush x:Key="TextBox.Static.ForegroundBrush" Color="{DynamicResource TextBox.Static.Foreground.Color}"/>
	<SolidColorBrush x:Key="TextBox.MouseOver.BorderBrush" Color="#7EB4EA"/>
	<SolidColorBrush x:Key="TextBox.Focus.BorderBrush" Color="#FF569DE5"/>
	<SolidColorBrush x:Key="TextBox.Disabled.BackgroundBrush" Color="{DynamicResource TextBox.Disabled.Background.Color}"/>
	<SolidColorBrush x:Key="TextBox.Disabled.ForegroundBrush" Color="{DynamicResource TextBox.Disabled.Foreground.Color}"/>

	<!-- *** ListBox Brushes *** -->
	<SolidColorBrush x:Key="ListBox.Static.BackgroundBrush" Color="{DynamicResource ListControl.Background.Color}"/>
	<SolidColorBrush x:Key="ListBox.Static.BorderBrush" Color="{DynamicResource ListControl.Border.Color}"/>
	<SolidColorBrush x:Key="ListBox.Disabled.BackgroundBrush" Color="{DynamicResource ListControl.Disabled.Background.Color}"/>
	<SolidColorBrush x:Key="ListBox.Disabled.BorderBrush" Color="{DynamicResource ListControl.Disabled.Border.Color}"/>

	<!-- *** ListBoxItem Brushes *** -->
	<SolidColorBrush x:Key="ListBoxItem.Static.ForegroundBrush" Color="{DynamicResource ListControl.Foreground.Color}"/>
	<SolidColorBrush x:Key="ListBoxItem.Selected.BackgroundBrush" Color="#DDD"/>
	<SolidColorBrush x:Key="ListBoxItem.Disabled.ForegroundBrush" Color="#80000000"/>

	<!-- *** ListView Brushes *** -->
	<SolidColorBrush x:Key="ListView.Static.BackgroundBrush" Color="{DynamicResource ListControl.Background.Color}"/>
	<SolidColorBrush x:Key="ListView.Static.BorderBrush" Color="{DynamicResource ListControl.Border.Color}"/>
	<SolidColorBrush x:Key="ListView.Static.ForegroundBrush" Color="{DynamicResource ListControl.Foreground.Color}"/>
	<SolidColorBrush x:Key="ListView.Disabled.BackgroundBrush" Color="#EFEFEF"/>

	<!-- *** ListViewItem Brushes *** -->
	<SolidColorBrush x:Key="ListViewItem.Static.BackgroundBrush" Color="Transparent" />
	<SolidColorBrush x:Key="ListViewItem.Static.BorderBrush" Color="Transparent" />
	<SolidColorBrush x:Key="ListViewItem.Static.ForegroundBrush" Color="{DynamicResource ListControl.Foreground.Color}" />
	<SolidColorBrush x:Key="ListViewItem.MouseOver.BackgroundBrush" Color="{DynamicResource ListControl.MouseOver.Background.Color}" />
	<SolidColorBrush x:Key="ListViewItem.MouseOver.BorderBrush" Color="{DynamicResource ListControl.MouseOver.Border.Color}" />
	<SolidColorBrush x:Key="ListViewItem.MouseOver.ForegroundBrush" Color="{DynamicResource ListControl.Selected.Text.Color}" />
	<SolidColorBrush x:Key="ListViewItem.Selected.BackgroundBrush" Color="{DynamicResource ListControl.Selected.Background.Color}" />
	<SolidColorBrush x:Key="ListViewItem.Selected.BorderBrush" Color="{DynamicResource ListControl.Selected.Border.Color}" />
	<SolidColorBrush x:Key="ListViewItem.Selected.ForegroundBrush" Color="{DynamicResource ListControl.Selected.Text.Color}" />
	<SolidColorBrush x:Key="ListViewItem.SelectedInactive.BackgroundBrush" Color="{DynamicResource ListControl.SelectedInactive.Background.Color}" />
	<SolidColorBrush x:Key="ListViewItem.SelectedInactive.BorderBrush" Color="{DynamicResource ListControl.SelectedInactive.Border.Color}" />
	<SolidColorBrush x:Key="ListViewItem.MouseOverSelected.BackgroundBrush" Color="{DynamicResource ListControl.MouseOverSelected.Background.Color}" />
	<SolidColorBrush x:Key="ListViewItem.MouseOverSelected.BorderBrush" Color="{DynamicResource ListControl.MouseOverSelected.Border.Color}" />
	<SolidColorBrush x:Key="ListViewItem.Disabled.ForegroundBrush" Color="#AAAAAA" />

	<!-- *** TreeView Brushes *** -->
	<SolidColorBrush x:Key="TreeView.Static.BackgroundBrush" Color="{DynamicResource ListControl.Background.Color}"/>
	<SolidColorBrush x:Key="TreeView.Static.BorderBrush" Color="{DynamicResource ListControl.Border.Color}"/>
	<SolidColorBrush x:Key="TreeView.Static.ForegroundBrush" Color="{DynamicResource ListControl.Foreground.Color}"/>
	<SolidColorBrush x:Key="TreeView.Disabled.ForegroundBrush" Color="{DynamicResource ListControl.Disabled.Foreground.Color}"/>
	<SolidColorBrush x:Key="TreeView.Selected.ForegroundBrush" Color="{DynamicResource ListControl.Selected.Text.Color}"/>
	<SolidColorBrush x:Key="TreeView.Disabled.BackgroundBrush" Color="#EFEFEF"/>

	<!-- *** TreeViewItem Brushes *** -->
	<SolidColorBrush x:Key="TreeViewItem.MouseOver.BackgroundBrush" Color="{DynamicResource ListControl.MouseOver.Background.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.MouseOver.BorderBrush" Color="{DynamicResource ListControl.MouseOver.Border.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.MouseOver.ForegroundBrush" Color="{DynamicResource ListControl.Selected.Text.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.Selected.BackgroundBrush" Color="{DynamicResource ListControl.Selected.Background.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.Selected.BorderBrush" Color="{DynamicResource ListControl.Selected.Border.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.Selected.ForegroundBrush" Color="{DynamicResource ListControl.Selected.Text.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.SelectedInactive.BackgroundBrush" Color="{DynamicResource ListControl.SelectedInactive.Background.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.SelectedInactive.BorderBrush" Color="{DynamicResource ListControl.SelectedInactive.Border.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.MouseOverSelected.BackgroundBrush" Color="{DynamicResource ListControl.MouseOverSelected.Background.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.MouseOverSelected.BorderBrush" Color="{DynamicResource ListControl.MouseOverSelected.Border.Color}" />
	<SolidColorBrush x:Key="TreeViewItem.Disabled.ForegroundBrush" Color="#AAAAAA" />

	<!-- *** Navigation Brushes *** -->
	<SolidColorBrush x:Key="Navigation.Static.BackgroundBrush" Color="{DynamicResource Nav.Background.Color}"/>
	<SolidColorBrush x:Key="Navigation.Static.BorderBrush" Color="{DynamicResource Nav.Border.Color}"/>
	<SolidColorBrush x:Key="Navigation.Static.ForegroundBrush" Color="White"/>
    <SolidColorBrush x:Key="Navigation.Pressed.BackgroundBrush" Color="#92506c"/>
    <SolidColorBrush x:Key="Navigation.MouseOver.BackgroundBrush" Color="#92506c"/>
    <SolidColorBrush x:Key="Navigation.Checked.BackgroundBrush" Color="#92506c"/>
    <SolidColorBrush x:Key="Navigation.Checked.Edge.BackgroundBrush" Color="#940140"/>
	<SolidColorBrush x:Key="Navigation.Expander.Static.ForegroundBrush" Color="White"/>
	<SolidColorBrush x:Key="Navigation.Expander.Pressed.ForegroundBrush" Color="{DynamicResource Nav.Expander.Pressed.Color}"/>
	<SolidColorBrush x:Key="Navigation.AccentBrush" Color="{DynamicResource Nav.Line.Color}"/>
	<SolidColorBrush x:Key="Navigation.ComboBox.Static.GlyphBrush" Color="#FFFFFF"/>
	<SolidColorBrush x:Key="Navigation.ComboBox.MouseOver.GlyphBrush" Color="#F77857"/>
	<SolidColorBrush x:Key="Navigation.ComboBox.Pressed.GlyphBrush" Color="#F77857"/>
	<SolidColorBrush x:Key="Navigation.ComboBox.Disabled.GlyphBrush" Color="#D0D5D8"/>
	<SolidColorBrush x:Key="Navigation.ComboBox.Static.BorderBrush" Color="Transparent"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.MouseOver.BackgroundBrush" Color="#1FFF0000"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.MouseOver.BorderBrush" Color="#A8D80000"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.Selected.BackgroundBrush" Color="LightGray"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.Selected.BorderBrush" Color="LightGray"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.SelectedMouseOver.BackgroundBrush" Color="LightGray"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.SelectedMouseOver.BorderBrush" Color="LightGray"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.SelectedNoFocus.BackgroundBrush" Color="LightGray"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.SelectedNoFocus.BorderBrush" Color="LightGray"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.Focus.BorderBrush" Color="LightGray"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.MouseOverFocus.BackgroundBrush" Color="#FFBDBDBD"/>
	<SolidColorBrush x:Key="Navigation.ComboBoxItem.MouseOverFocus.BorderBrush" Color="#FFBDBDBD"/>
	<SolidColorBrush x:Key="Navigation.AddButton.Static.BackgroundBrush" Color="#FFDDDDDD"/>
	<SolidColorBrush x:Key="Navigation.AddButton.Static.BorderBrush" Color="Black"/>
	<SolidColorBrush x:Key="Navigation.AddButton.MouseOver.BackgroundBrush" Color="#FFBF5700"/>
	<SolidColorBrush x:Key="Navigation.AddButton.MouseOver.BorderBrush" Color="Black"/>
	<SolidColorBrush x:Key="Navigation.AddButton.Pressed.BackgroundBrush" Color="#FFBF5700"/>
	<SolidColorBrush x:Key="Navigation.AddButton.Pressed.BorderBrush" Color="White"/>
	<SolidColorBrush x:Key="Navigation.AddButton.Disabled.BackgroundBrush" Color="#FFF4F4F4"/>
	<SolidColorBrush x:Key="Navigation.AddButton.Disabled.BorderBrush" Color="#FFADB2B5"/>
	<SolidColorBrush x:Key="Navigation.AddButton.Disabled.ForegroundBrush" Color="#FF838383"/>
	<SolidColorBrush x:Key="Navigation.NavSelector.Static.BackgroundBrush" Color="White"/>
	<SolidColorBrush x:Key="Navigation.NavSelector.Static.BorderBrush" Color="#444444"/>
	<SolidColorBrush x:Key="Navigation.NavSelector.Static.ForegroundBrush" Color="#FFFFFF" />
	<SolidColorBrush x:Key="Navigation.NavSelector.Selected.ForegroundBrush" Color="#FFFFFF"/>
	<SolidColorBrush x:Key="Navigation.NavSelector.Content.ForegroundBrush" Color="#000000"/>

	<!-- *** Expander Brushes *** -->
	<LinearGradientBrush x:Key="Expander.Static.BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFF" Offset="0.0"/>
		<GradientStop Color="#FFEEEEEE" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="Expander.Static.BorderBrush" Color="Black"/>
	<SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FFF5C390"/>
	<SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="White"/>
	<SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
	<SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="White"/>
	<SolidColorBrush x:Key="Expander.Content.BackgroundBrush" Color="#FFF"/>
	<SolidColorBrush x:Key="Expander.Content.BorderBrush" Color="#888"/>
	<SolidColorBrush x:Key="Expander.Disabled.BackgroundBrush" Color="#FFC2C2C2"/>
	<SolidColorBrush x:Key="Expander.Disabled.BorderBrush" Color="#D8000000"/>
	<SolidColorBrush x:Key="Expander.Disabled.ForegroundBrush" Color="#80000000"/>

	<!-- *** ExpanderToggleButton Brushes *** -->
	<SolidColorBrush x:Key="ExpanderToggleButton.Static.BackgroundBrush" Color="#FF837B6E"/>
	<SolidColorBrush x:Key="ExpanderToggleButton.Static.BorderBrush" Color="Black"/>
	<SolidColorBrush x:Key="ExpanderToggleButton.Static.GlyphBrush" Color="White"/>
	<SolidColorBrush x:Key="ExpanderToggleButton.MouseOver.BackgroundBrush" Color="#FFC5BBA7"/>
	<SolidColorBrush x:Key="ExpanderToggleButton.Pressed.BackgroundBrush" Color="#FFFDA16A"/>
	<SolidColorBrush x:Key="ExpanderToggleButton.Disabled.BackgroundBrush" Color="#FFC2C2C2"/>
	<SolidColorBrush x:Key="ExpanderToggleButton.Disabled.BorderBrush" Color="#D8000000"/>
	<SolidColorBrush x:Key="ExpanderToggleButton.Disabled.ForegroundBrush" Color="#80000000"/>

	<!-- *** Thumb Brushes *** -->
	<SolidColorBrush x:Key="Thumb.Static.BackgroundBrush" Color="#FFA1A1A1"/>
	<SolidColorBrush x:Key="Thumb.Static.BorderBrush" Color="#FFA1A1A1"/>

	<!-- *** ProgressBar Brushes *** -->
	<SolidColorBrush x:Key="ProgressDialog.BackgroundBrush" Color="{DynamicResource Dialog.Background.Color}"/>
	<SolidColorBrush x:Key="ProgressDialog.ForegroundBrush" Color="{DynamicResource NormalView.Foreground.Color}"/>
	<SolidColorBrush x:Key="ProgressDialog.BorderBrush" Color="{DynamicResource ProgressDialog.BorderBrush.Color}"/>
	<SolidColorBrush x:Key="ProgressDialog.Indicator.BackgroundBrush" Color="{DynamicResource ProgressDialog.Indicator.Color}"/>

	<!-- *** ProgressBar Brushes *** -->
	<SolidColorBrush x:Key="ProgressBar.BackgroundBrush" Color="#B2B2B2"/>
	<SolidColorBrush x:Key="ProgressBar.BorderBrush" Color="#000000"/>
	<SolidColorBrush x:Key="ProgressBar.ForegroundBrush" Color="#44555F"/>
	<SolidColorBrush x:Key="ProgressBar.TextBrush" Color="#FFFFFF"/>

	<!-- *** Separator Brushes *** -->
	<SolidColorBrush x:Key="Separator.Static.BorderBrush" Color="#888"/>

	<!-- ** GridSplitter Brushes *** -->
	<SolidColorBrush x:Key="GridSplitter.BackgroundBrush" Color="#FF6A635D"/>

	<!-- *** SafetyMuteToggleButton Brushes *** -->
	<LinearGradientBrush x:Key="SafetyMuteToggleButton.EnabledChecked.ForegroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFF" Offset="0.0"/>
		<GradientStop Color="#FFEEEEEE" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="SafetyMuteToggleButton.Selected.BackgroundBrush" Color="#FFFF6306"/>
	<SolidColorBrush x:Key="SafetyMuteToggleButton.MouseOver.BorderBrush" Color="#FFC5BBA7"/>

	<!-- *** DiscreteCheckBox Brushes *** -->
	<SolidColorBrush x:Key="DiscreteCheckBox.Static.BackgroundBrush" Color="#FF837B6E"/>
	<SolidColorBrush x:Key="DiscreteCheckBox.Static.BorderBrush" Color="Black"/>

	<!-- *** Special Case Brushes *** -->
	<SolidColorBrush x:Key="SpecialSelectionColorBrush" Color="#FFff7f25"/>
	<SolidColorBrush x:Key="SpecialSelectionDisabledColorBrush" Color="#33ff7f25"/>
	<!--<SolidColorBrush x:Key="SpecialSelectionDisabledColorBrush" Color="#FFD3AB8E"/>-->
	<SolidColorBrush x:Key="AccentColorBrush" Color="#FFFF6306"/>
	<SolidColorBrush x:Key="Accent2ColorBrush" Color="#FFCB4C00"/>
	<SolidColorBrush x:Key="ChannelAdornerBorderBrush" Color="Black"/>


	<!-- ************************ -->
	<!-- ******* CONTROLS ******* -->
	<!-- ************************ -->

    <!-- User Control-->
    <Style x:Key="StandardUserControl" TargetType="UserControl">
        <Setter Property="Margin" Value="5"/>
    </Style>
    
	<!-- Standard Menu -->
    <!--<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.MenuTextBrushKey}}"/>-->
    <Style x:Key="StandardMenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource Menu.Static.BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Menu.Static.BorderBrush}"/>
        <Setter Property="FontFamily" Value="{StaticResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{StaticResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{StaticResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{StaticResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default Menu -->
	<Style TargetType="{x:Type Menu}" BasedOn="{StaticResource StandardMenuStyle}"/>

	<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
		<Setter Property="Height" Value="1"/>
		<Setter Property="Margin" Value="0,4,0,4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Separator">
					<Border BorderBrush="{StaticResource Separator.Static.BorderBrush}" BorderThickness="1"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TopLevelHeader -->
	<ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="MenuItem">
		<Border Name="Border" >
			<Grid>
				<ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
				<Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
					<Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{StaticResource Submenu.Static.BackgroundBrush}" BorderBrush="{StaticResource Menu.Static.BorderBrush}" BorderThickness="1" >
						<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsSuspendingPopupAnimation" Value="true">
				<Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource Menu.Highlight.BackgroundBrush}"/>
				<Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="false">
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
			<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
				<Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
				<Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource Menu.Disabled.ForegroundBrush}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- TopLevelItem -->
	<ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="MenuItem">
		<Border Name="Border" >
			<Grid>
				<ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource Menu.Disabled.ForegroundBrush}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- SubmenuItem -->
	<ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
		<Border Name="Border" >
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
					<ColumnDefinition Width="13"/>
				</Grid.ColumnDefinitions>
				<ContentPresenter  Name="Icon" Margin="3,0" VerticalAlignment="Center" ContentSource="Icon" Width="25" Height="16"/>
				<Border Name="Check" Width="16" Height="16" Visibility="Collapsed" Background="Transparent" BorderThickness="0" BorderBrush="#5082a4" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center">
					<Path x:Name="CheckMark" Visibility="Hidden" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight" HorizontalAlignment="Center"/>
				</Border>
				<ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
				<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,0,0,0" DockPanel.Dock="Right" VerticalAlignment="Center" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
			</Trigger>
			<Trigger Property="IsCheckable" Value="true">
				<Setter TargetName="Check" Property="Visibility" Value="Visible"/>
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource Menu.Highlight.BackgroundBrush}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource Menu.Disabled.ForegroundBrush}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- SubmenuHeader -->
	<ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
		<Border Name="Border" >
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
					<ColumnDefinition Width="13"/>
				</Grid.ColumnDefinitions>
				<ContentPresenter Name="Icon" Margin="3,0" VerticalAlignment="Center" ContentSource="Icon" Width="25" Height="16"/>
				<ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
				<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2"  DockPanel.Dock="Right"/>
				<Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{StaticResource Menu.Static.GlyphBrush}" />
				<Popup Name="Popup" Placement="Right" HorizontalOffset="-4" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
					<Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{StaticResource Submenu.Static.BackgroundBrush}"  BorderBrush="{StaticResource Menu.Static.BorderBrush}" BorderThickness="1" >
						<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background"  Value="{StaticResource Menu.Highlight.BackgroundBrush}"/>
			</Trigger>
			<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
				<Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
				<Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource Menu.Disabled.ForegroundBrush}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Standard MenuItem -->
	<Style x:Key="StandardMenuItemStyle" TargetType="{x:Type MenuItem}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Style.Triggers>
			<Trigger Property="Role" Value="TopLevelHeader">
				<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
				<Setter Property="Grid.IsSharedSizeScope" Value="true"/>
			</Trigger>
			<Trigger Property="Role" Value="TopLevelItem">
				<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
			</Trigger>
			<Trigger Property="Role" Value="SubmenuHeader">
				<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
			</Trigger>
			<Trigger Property="Role" Value="SubmenuItem">
				<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Default MenuItem -->
	<Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource StandardMenuItemStyle}"/>

	<!--Outer menu items-->
	<Style x:Key="TopMenuItemStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource StandardMenuItemStyle}">
		<Setter Property="Foreground" Value="White"></Setter>
	</Style>



	<BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

	<!-- Standard GroupBox -->
	<Style x:Key="StandardGroupBoxStyle" TargetType="{x:Type GroupBox}">
		<Setter Property="BorderBrush" Value="{StaticResource GroupBox.Static.BorderBrush}"/>
		<Setter Property="BorderThickness" Value=".5"/>
		<Setter Property="Foreground" Value="{StaticResource GroupBox.Static.ForegroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="6"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="6"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
							<RowDefinition Height="6"/>
						</Grid.RowDefinitions>
						<Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
						<ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						<Border BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
							<Border.OpacityMask>
								<MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
									<Binding ElementName="Header" Path="ActualWidth"/>
									<Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
									<Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
								</MultiBinding>
							</Border.OpacityMask>
							<Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}">
								<Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}"/>
							</Border>
						</Border>
						<Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
							<ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" TextElement.FontSize="15" TextElement.FontWeight="Medium" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Height="Auto" VerticalAlignment="Top" Width="Auto"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default GroupBox -->
	<Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource StandardGroupBoxStyle}"/>

	<!-- Pullout GroupBox -->
	<Style x:Key="PulloutGroupBoxStyle" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource StandardGroupBoxStyle}">
		<Setter Property="BorderBrush" Value="{StaticResource Pullout.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource Pullout.ForegroundBrush}"/>
	</Style>


	<!-- Standard TabControl-->
	<Style x:Key="StandardTabControlStyle" TargetType="{x:Type TabControl}">
		<Setter Property="Foreground" Value="{StaticResource TabControl.Static.ForegroundBrush}"/>
		<Setter Property="Padding" Value="4,4,4,4"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{StaticResource TabControl.Static.BorderBrush}"/>
		<Setter Property="Background" Value="{x:Null}"/>
		<!-- F9F9F9-->
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="0,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
						<Grid.ColumnDefinitions>
							<ColumnDefinition x:Name="ColumnDefinition0"/>
							<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
							<RowDefinition x:Name="RowDefinition1" Height="*"/>
						</Grid.RowDefinitions>
						<TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
						<Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
							<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
							<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
							<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
							<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
							<Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
							<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
							<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
							<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
							<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- NavBar TabControl-->
	<Style x:Key="NavBarTabControlStyle" TargetType="{x:Type TabControl}" BasedOn="{StaticResource StandardTabControlStyle}">
		<Setter Property="BorderThickness" Value="0"/>
	</Style>

	<!-- Default TabControl -->
	<Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource StandardTabControlStyle}"/>

	<!--TabItemFocusVisualStyle-->
	<Style x:Key="TabItemFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="3,3,3,1" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard TabItem -->
	<Style x:Key="StandardTabItemStyle" TargetType="{x:Type TabItem}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisualStyle}"/>
		<Setter Property="Foreground" Value="{StaticResource TabItem.Static.ForegroundBrush}"/>
		<Setter Property="Padding" Value="6,1,6,1"/>
		<Setter Property="BorderBrush" Value="{StaticResource TabControl.Static.BorderBrush}"/>
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid SnapsToDevicePixels="true" Margin="0,0,1,0">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"  BorderThickness="1,1,1,0" Padding="{TemplateBinding Padding}" CornerRadius="3">
							<ContentPresenter x:Name="Content" TextElement.FontWeight="Medium" TextElement.FontSize="14" ContentSource="Header" Margin="0,0,0,2" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
						</Border>
						<Border x:Name="selector" Background="{StaticResource TabItem.Hot.Edge.Brush}" BorderThickness="1,0" VerticalAlignment="Bottom"  Height="3" Visibility="Collapsed"/>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="false"/>
								<Condition Property="IsMouseOver" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{StaticResource TabItem.Hot.ForegroundBrush}"/>
						</MultiTrigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Panel.ZIndex" Value="1"/>
							<Setter Property="Visibility" TargetName="selector" Value="Visible"/>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItem.Hot.BackgroundBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource TabItem.Selected.ForegroundBrush}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="false"/>
								<Condition Property="IsMouseOver" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItem.Hot.BackgroundBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource TabItem.Selected.ForegroundBrush}"/>
							<Setter Property="Background" TargetName="selector" Value="{StaticResource TabItem.Hot.BackgroundBrush}"/>
							<Setter Property="Visibility" TargetName="selector" Value="Visible"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="TabStripPlacement" Value="Top"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="TabStripPlacement" Value="Bottom"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="TabStripPlacement" Value="Left"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="TabStripPlacement" Value="Right"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="false"/>
								<Condition Property="IsEnabled" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItem.Disabled.BackgroundBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource TabItem.Disabled.ForegroundBrush}"/>
							<Setter Property="Background" TargetName="selector" Value="{StaticResource TabItem.Disabled.BorderBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="IsEnabled" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItem.Disabled.BackgroundBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource TabItem.Disabled.ForegroundBrush}"/>
							<Setter Property="Background" TargetName="selector" Value="{StaticResource TabItem.Disabled.BorderBrush}"/>
							<Setter Property="Visibility" TargetName="selector" Value="Visible"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default TabItem -->
	<Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource StandardTabItemStyle}"/>

	<!--Toolbar-->
	<Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
		<Setter Property="Background" Value="{StaticResource Toolbar.Static.BackgroundBrush}"/>
		<Setter Property="Margin" Value="0,0,11,0"/>

		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="CornerRadius" Value="0,0,0,0"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<!-- Standard ToolBar -->
	<Style x:Key="StandardToolBar" TargetType="{x:Type ToolBar}">
		<Setter Property="Background" Value="{StaticResource ToolBarButton.Horizontal.BackgroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<Grid x:Name="Grid" SnapsToDevicePixels="true">
						<Grid x:Name="OverflowGrid" HorizontalAlignment="Right"  />
						<Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource Toolbar.Static.BackgroundBrush}" Padding="{TemplateBinding Padding}" Style="{StaticResource ToolBarMainPanelBorderStyle}" Margin="0">
							<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
								<ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
								<ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</DockPanel>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Header" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
							<Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
							<Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
							<Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
							<Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
							<Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
							<Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
							<Setter Property="Background" Value="{StaticResource ToolBarButton.Vertical.BackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="Background" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<!-- Default ToolBar -->
	<Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource StandardToolBar}"/>

	<Style x:Key="ButtonFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{StaticResource AccentColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Mini App Button Style -->
	<Style x:Key="MiniAppButtonStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition/>
						</Grid.ColumnDefinitions>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.5">
										<VisualTransition.GeneratedEasingFunction>
											<CircleEase EasingMode="EaseOut"/>
										</VisualTransition.GeneratedEasingFunction>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundMouseOver">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundPressed">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundChecked">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>

								</VisualState>
								<VisualState x:Name="Disabled"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Grid.ColumnSpan="1" VerticalAlignment="Stretch">
							<Grid>
								<Border x:Name="BackgroundMouseOver" CornerRadius="0" Opacity="0" Background="{StaticResource GRONLY_MiniAppHoverBrush}"/>
								<Border x:Name="BackgroundPressed" CornerRadius="0" Opacity="0" Background="{StaticResource GRONLY_MiniAppMouseDownBrush}"/>
								<Border x:Name="BackgroundChecked" CornerRadius="0" Opacity="0" Background="{StaticResource GRONLY_MiniAppSelectedBrush}"/>
							</Grid>
						</Border>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.ColumnSpan="1"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true"/>
						<Trigger Property="IsChecked" Value="true"/>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="#727272"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="#00F4F4F4"/>
		<Setter Property="BorderBrush" Value="#008E8F8F"/>
	</Style>

	<!--ToolbarButtonStyle-->
	<Style x:Key="ToolbarButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource Toolbar.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ToolbarButton.Static.BorderBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Foreground" Value="{StaticResource ToolbarButton.Static.ForegroundBrush}"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.5">
										<VisualTransition.GeneratedEasingFunction>
											<CircleEase EasingMode="EaseOut"/>
										</VisualTransition.GeneratedEasingFunction>
									</VisualTransition>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.25" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.25" To="MouseOver"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundMouseOver">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundPressed">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
							<Grid>
								<Border x:Name="BackgroundMouseOver" BorderThickness="1" BorderBrush="{StaticResource ToolbarButton.MouseOver.BorderBrush}" CornerRadius="3" Opacity="0" Background="{StaticResource ToolbarButton.MouseOver.BackgroundBrush}"/>
								<Border x:Name="BackgroundPressed" BorderThickness="1.5,1.5,0.5,0.5" CornerRadius="3" Opacity="0" Background="{StaticResource ToolBarButton.Pressed.BackgroundBrush}" BorderBrush="{StaticResource ToolBarButton.Pressed.BorderBrush}"/>
							</Grid>
						</Border>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true"/>
						<Trigger Property="ToggleButton.IsChecked" Value="true"/>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="#727272"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="GRONLY_NavigationRadioButtonControlTemplate" TargetType="{x:Type RadioButton}">
		<Grid>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangleMouseOver">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectanglePressed">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill)" Storyboard.TargetName="rectanglePressed">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource Navigation.Pressed.BackgroundBrush}"/>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="textBlock">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangleChecked">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="path">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked"/>
					<VisualState x:Name="Indeterminate"/>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualState x:Name="Unfocused"/>
					<VisualState x:Name="Focused"/>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Border x:Name="Background" SnapsToDevicePixels="true" Grid.ColumnSpan="1" VerticalAlignment="Stretch">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="20"/>
						<ColumnDefinition />
					</Grid.ColumnDefinitions>
					<Path x:Name="path" Data="M1,0 L2,1 1,2 z" Fill="{StaticResource Navigation.Checked.BackgroundBrush}" HorizontalAlignment="Right" Height="{Binding ActualHeight, ElementName=textBlock, Mode=OneWay}" Stretch="Fill" Stroke="Black" VerticalAlignment="Stretch" StrokeThickness="0" Opacity="0" Width="8" Grid.Column="1" Margin="0,9.52"/>
					<StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="1">
						<Grid Margin="0,0,5,0" Width="1.5">
							<Rectangle x:Name="rectangleMouseOver" Fill="{StaticResource Navigation.MouseOver.BackgroundBrush}" HorizontalAlignment="Stretch" Height="{Binding ActualHeight, ElementName=textBlock, Mode=OneWay}" Stroke="Black" StrokeThickness="0" VerticalAlignment="Stretch" Width="Auto" Margin="0,9.52" Opacity="0"/>
							<Rectangle x:Name="rectangleChecked" Fill="{StaticResource Navigation.Checked.BackgroundBrush}" HorizontalAlignment="Stretch" Height="{Binding ActualHeight, ElementName=textBlock, Mode=OneWay}" Stroke="Black" StrokeThickness="0" VerticalAlignment="Stretch" Width="Auto" Margin="0" Opacity="0"/>
							<Rectangle x:Name="rectanglePressed" Fill="{StaticResource Navigation.MouseOver.BackgroundBrush}" HorizontalAlignment="Stretch" Height="{Binding ActualHeight, ElementName=textBlock, Mode=OneWay}" Stroke="Black" StrokeThickness="0" VerticalAlignment="Stretch" Width="Auto" Margin="0,9.52" Opacity="0"/>
						</Grid>
						<TextBlock x:Name="textBlock" TextTrimming="WordEllipsis" Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource Navigation.Static.ForegroundBrush}"/>
					</StackPanel>
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Foreground" TargetName="textBlock" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="DogEarCheckBoxFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="15,0,0,0" Stroke="{StaticResource AccentColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Dog Ear CheckBox -->
	<Style x:Key="DogEarCheckBoxStyle" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource DogEarCheckBoxFocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource DogEar.CheckBox.Static.GlyphBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource DogEarCheckBoxNormalBorderBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="13" Height="13">
								<Border x:Name="Border" BorderThickness="1.5" BorderBrush="#FF464646">
									<Border.Background>
										<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
											<GradientStop Color="#FFE8E8E8" Offset="0"/>
											<GradientStop Color="#FFAEAEAE" Offset="1"/>
										</LinearGradientBrush>
									</Border.Background>
								</Border>
								<Path x:Name="CheckMark" SnapsToDevicePixels="False" Data="M1.5,1.5 L11.5,1.5 1.5,11.5 z" Margin="0" StrokeThickness="0" Fill="#FF292929" Visibility="Visible"/>
								<Border x:Name="Indeterminate" Visibility="Collapsed" Margin="1" BorderThickness="0.7">
									<Border.Background>
										<LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
											<GradientStop Color="#FF6C6C6C" Offset="1"/>
											<GradientStop Color="#FFB2B2B2"/>
											<GradientStop Color="#FF5F5F5F" Offset="0.5"/>
											<GradientStop Color="#FFB2B2B2"/>
										</LinearGradientBrush>
									</Border.Background>
									<Border.BorderBrush>
										<LinearGradientBrush EndPoint="0,0" StartPoint="1,1">
											<GradientStop Color="#FF323232" Offset="0"/>
											<GradientStop Color="#FFCFCFCF" Offset="0.996"/>
											<GradientStop Color="#FF323232" Offset="0.49"/>
											<GradientStop Color="#FFCFCFCF" Offset="0.51"/>
										</LinearGradientBrush>
									</Border.BorderBrush>
								</Border>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</BulletDecorator>

					<!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
							<Setter Property="Visibility" Value="Visible" TargetName="Indeterminate"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource DogEar.CheckBox.MouseOver.BackgroundBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource DogEar.CheckBox.Pressed.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource DogEar.CheckBox.Pressed.BorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource DogEar.CheckBox.Disabled.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource DogEar.CheckBox.Disabled.BorderBrush}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
						<Path Data="M0,0 L0,1" HorizontalAlignment="Left" Height="Auto" StrokeEndLineCap="Round" VerticalAlignment="Stretch" Width="Auto" StrokeThickness="1.5" Opacity="0.5" StrokeStartLineCap="Round" StrokeLineJoin="Round" Stretch="Fill" Margin="0,2,0,3">
							<Path.Stroke>
								<LinearGradientBrush EndPoint="0.889,0" StartPoint="-0.222,0">
									<GradientStop Color="Black" Offset="1"/>
									<GradientStop Color="White" Offset="0.3"/>
								</LinearGradientBrush>
							</Path.Stroke>
						</Path>
					</Border>
					<ControlTemplate.Triggers>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MainToolBarStyle" TargetType="{x:Type ToolBar}">
		<Setter Property="Background" Value="{StaticResource ToolBar.Horizontal.BackgroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<Grid x:Name="Grid" SnapsToDevicePixels="true">
						<Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Style="{StaticResource ToolBarMainPanelBorderStyle}" Margin="0">
							<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
								<Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,3,1,1" Style="{StaticResource ToolBarThumbStyle}" Width="10" Visibility="Visible"/>
								<ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
								<ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</DockPanel>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsOverflowOpen" Value="true">
							<Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
						</Trigger>
						<Trigger Property="Header" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="ToolBarTray.IsLocked" Value="true">
							<Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
							<Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
							<Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
							<Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
							<Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
							<Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
							<Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
							<Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
							<Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
							<Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
							<Setter Property="Background" Value="{StaticResource ToolBar.Vertical.BackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="Background" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="MainToolBarStyle2" TargetType="{x:Type ToolBar}">
		<Setter Property="Background" Value="{StaticResource Toolbar.Static.BackgroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<Grid x:Name="Grid" SnapsToDevicePixels="true">
						<Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Style="{StaticResource ToolBarMainPanelBorderStyle}" Margin="0">
							<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
								<ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
								<ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</DockPanel>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsOverflowOpen" Value="true"/>
						<Trigger Property="Header" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="ToolBarTray.IsLocked" Value="true"/>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
							<Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
							<Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
							<Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
							<Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
							<Setter Property="Background" Value="{StaticResource ToolBar.Vertical.BackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="Background" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<!-- *********************** -->
	<!-- ******* BUTTONS ******* -->
	<!-- *********************** -->

	<!-- StandardButtonFocusVisualStyle is used to show keyboard focus around a StandardButton control -->
	<Style x:Key="StandardButtonFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="2" Stroke="{StaticResource AccentColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard Button -->
	<Style x:Key="StandardButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource StandardButtonFocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource Button.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource Button.Static.ForegroundBrush}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Height" Value="24"/>
		<Setter Property="Padding" Value="24,1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">

					<!-- We use Grid as a root because it is easy to add more elements to customize the button -->
					<Grid x:Name="Grid">

						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="2"/>
						<Border x:Name="DefaultedBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="2"/>
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
						<ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>

					<!--Each state sets a brush on the Border in the template -->
					<ControlTemplate.Triggers>
						<!--<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsDefault" Value="true"/>
								<Condition Property="IsKeyboardFocused" Value="true"/>
								<Condition Property="IsEnabled" Value="true"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter TargetName="DefaultedBorder" Property="BorderBrush" Value="{StaticResource AccentColorBrush}"/>
								<Setter TargetName="DefaultedBorder" Property="BorderThickness" Value="2"/>
								<Setter TargetName="DefaultedBorder" Property="Margin" Value="0"/>
							</MultiTrigger.Setters>
						</MultiTrigger>-->
						<Trigger Property="IsDefaulted" Value="true">
							<Setter TargetName="DefaultedBorder" Property="BorderBrush" Value="{StaticResource AccentColorBrush}"/>
							<Setter TargetName="DefaultedBorder" Property="BorderThickness" Value="2"/>
							<Setter TargetName="DefaultedBorder" Property="Margin" Value="0"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource Button.MouseOver.BackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource Button.Pressed.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource Button.Pressed.BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource Button.Disabled.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource Button.Disabled.BorderBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default Button -->
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource StandardButtonStyle}"/>

	<!-- Standard ToggleButton -->
	<Style x:Key="StandardToggleButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource StandardButtonFocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource Button.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource Button.Static.ForegroundBrush}"/>
	</Style>

	<!-- Default ToggleButton -->
	<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource StandardToggleButtonStyle}"/>

	<!-- Safety Mute ToggleButton -->
	<Style x:Key="SafetyMuteToggleButtonStyle"  TargetType="{x:Type ToggleButton}">
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True"/>
					<Condition Property="IsEnabled" Value="True"/>
				</MultiTrigger.Conditions>
				<Setter Property="Foreground" Value="{StaticResource SafetyMuteToggleButton.EnabledChecked.ForegroundBrush}"/>
			</MultiTrigger>
		</Style.Triggers>
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource StandardButtonFocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource Toolbar.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Toolbar.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="Black"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent" d:DesignWidth="57" RenderTransformOrigin="0.5,0.5">
						<BulletDecorator.RenderTransform>
							<TransformGroup>
								<ScaleTransform/>
								<SkewTransform AngleX="1.548"/>
								<RotateTransform/>
								<TranslateTransform X="0.473"/>
							</TransformGroup>
						</BulletDecorator.RenderTransform>
						<BulletDecorator.Bullet>
							<Grid x:Name="grid" Width="Auto" Height="Auto">
								<Border x:Name="Background" Background="{StaticResource Toolbar.Static.BackgroundBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3"/>
								<Border x:Name="Selected" Background="{StaticResource SafetyMuteToggleButton.Selected.BackgroundBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Opacity="0"/>
								<Border x:Name="Hover"  BorderBrush="{StaticResource SafetyMuteToggleButton.MouseOver.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Opacity="0"/>
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" Margin="3,2" />
							</Grid>
						</BulletDecorator.Bullet>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.25"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Hover">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="grid">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Selected">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</BulletDecorator>


				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Transparent Button -->
	<Style x:Key="TransparentButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource StandardButtonFocusVisualStyle}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="contentPresenter" Property="Opacity" Value="0.75"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="contentPresenter" Property="Opacity" Value="0.25"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Image Button -->
	<Style x:Key="ImageButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource StandardButtonFocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource ImageButton.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ImageButton.Static.BorderBrush}"/>

		<Setter Property="BorderThickness" Value="1.5" />

		<Setter Property="Foreground" Value="{StaticResource ImageButtonLightForegroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">


					<!-- We use Grid as a root because it is easy to add more elements to customize the button -->

					<Grid x:Name="Grid">

						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="0"/>

						<!-- The bindings are useful so that the control can be parameterized without editing the template -->

						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>


					<!--Each state sets a brush on the Border in the template -->

					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{StaticResource ImageButton.Focus.BorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" Value="{StaticResource ImageButton.MouseOver.BorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource ImageButton.Pressed.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource ImageButton.Pressed.BorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="true"/>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource ImageButton.Disabled.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource ImageButton.Disabled.BorderBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{StaticResource ImageButton.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="StandardImageButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource StandardButtonFocusVisualStyle}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="Foreground" Value="{StaticResource Button.Static.ForegroundBrush}"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">

					<!-- We use Grid as a root because it is easy to add more elements to customize the button -->
					<Grid x:Name="Grid">

						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="2"/>
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
						<ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>

					<!--Each state sets a brush on the Border in the template -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{StaticResource Button.Focus.BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource Button.MouseOver.BackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource Button.Pressed.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource Button.Pressed.BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource Button.Disabled.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource Button.Disabled.BorderBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ************************** -->
	<!-- ******* CHECKBOXES ******* -->
	<!-- ************************** -->

	<Style x:Key="CheckBox.FocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="0,0,0,0" Stroke="{StaticResource AccentColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard CheckBox -->
	<Style x:Key="StandardCheckBoxStyle" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckBox.FocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource CheckBox.Checked.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource CheckBox.Static.BorderBrush}"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="Foreground" Value="{StaticResource CheckBox.Static.ForegroundBrush}"/>
		<Setter Property="TextElement.FontSize" Value="12"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="16" Height="16">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
								<Path x:Name="CheckMark" Stroke="{TemplateBinding Foreground}" StrokeThickness="2.2" SnapsToDevicePixels="False" Data="M8.6336322,1.1 C4.4091471,3.2539729 2.1144687,11.738215 1.8400224,7.4228027 1.6613011,4.6125746 1.0999999,5.0012781 1.0999999,5.0012781" RenderTransformOrigin="0.5,0.5" StrokeEndLineCap="Round" StrokeStartLineCap="Round" VerticalAlignment="Center" HorizontalAlignment="Center"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</BulletDecorator>

					<!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
							<Setter Property="Background" Value="{StaticResource CheckBox.Static.BackgroundBrush}"/>
						</Trigger>
						<!--<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" Value="#FF35434B"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource CheckBox.Pressed.BackgroundBrush}" TargetName="Border"/>
						</Trigger>-->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource CheckBox.Disabled.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource CheckBox.Disabled.GlyphBrush}" TargetName="Border"/>
							<Setter Property="Stroke" Value="{StaticResource CheckBox.Disabled.GlyphBrush}" TargetName="CheckMark"/>
							<Setter Property="Foreground" Value="{StaticResource CheckBox.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SelectedCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource StandardCheckBoxStyle}">
		<Setter Property="BorderBrush" Value="{StaticResource SelectedCheckBox.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource SelectedCheckBox.Static.ForegroundBrush}"/>
	</Style>

	<Style x:Key="CheckOnlyCheckBoxStyle" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckBox.FocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource CheckBox.Checked.BackgroundBrush}"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="Foreground" Value="{StaticResource CheckBox.Static.ForegroundBrush}"/>
		<Setter Property="TextElement.FontSize" Value="12"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="16" Height="16">
								<Path x:Name="CheckMark" Stroke="{TemplateBinding Foreground}" StrokeThickness="2.2" SnapsToDevicePixels="False" Data="M8.6336322,1.1 C4.4091471,3.2539729 2.1144687,11.738215 1.8400224,7.4228027 1.6613011,4.6125746 1.0999999,5.0012781 1.0999999,5.0012781" RenderTransformOrigin="0.5,0.5" StrokeEndLineCap="Round" StrokeStartLineCap="Round" VerticalAlignment="Center" HorizontalAlignment="Center"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</BulletDecorator>

					<!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
							<Setter Property="Background" Value="{StaticResource CheckBox.Static.BackgroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default CheckBox -->
	<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource StandardCheckBoxStyle}"/>

	<!-- Channel CheckBox: This is used in the channel properties -->
	<Style x:Key="ChanelCheckBoxStyle" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckBox.FocusVisualStyle}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource Channel.Static.ForegroundBrush}"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="Foreground" Value="{StaticResource Channel.Static.ForegroundBrush}"/>
		<Setter Property="TextElement.FontSize" Value="12"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="16" Height="16">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
								<Path x:Name="CheckMark" Stroke="{StaticResource Channel.Static.ForegroundBrush}" StrokeThickness="2.2" SnapsToDevicePixels="False" Data="M8.6336322,1.1 C4.4091471,3.2539729 2.1144687,11.738215 1.8400224,7.4228027 1.6613011,4.6125746 1.0999999,5.0012781 1.0999999,5.0012781" RenderTransformOrigin="0.5,0.5" StrokeEndLineCap="Round" StrokeStartLineCap="Round" VerticalAlignment="Center" HorizontalAlignment="Center"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</BulletDecorator>

					<!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
							<Setter Property="Background" Value="{StaticResource CheckBox.Static.BackgroundBrush}"/>
						</Trigger>
						<!--<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" Value="#FF35434B"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource CheckBox.Pressed.BackgroundBrush}" TargetName="Border"/>
						</Trigger>-->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="BorderBrush" Value="{StaticResource Channel.Disabled.ForegroundBrush}" TargetName="Border"/>
							<Setter Property="Stroke" Value="{StaticResource Channel.Disabled.ForegroundBrush}" TargetName="CheckMark"/>
							<Setter Property="Foreground" Value="{StaticResource Channel.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Pullout CheckBox: This is used in pullouts -->
	<Style x:Key="PulloutCheckBoxStyle" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckBox.FocusVisualStyle}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource Pullout.ForegroundBrush}"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="Foreground" Value="{StaticResource Pullout.ForegroundBrush}"/>
		<Setter Property="TextElement.FontSize" Value="12"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="16" Height="16">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
								<Path x:Name="CheckMark" Stroke="{StaticResource Pullout.ForegroundBrush}" StrokeThickness="2.2" SnapsToDevicePixels="False" Data="M8.6336322,1.1 C4.4091471,3.2539729 2.1144687,11.738215 1.8400224,7.4228027 1.6613011,4.6125746 1.0999999,5.0012781 1.0999999,5.0012781" RenderTransformOrigin="0.5,0.5" StrokeEndLineCap="Round" StrokeStartLineCap="Round" VerticalAlignment="Center" HorizontalAlignment="Center"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</BulletDecorator>

					<!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
							<Setter Property="Background" Value="{StaticResource CheckBox.Static.BackgroundBrush}"/>
						</Trigger>
						<!--<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" Value="#FF35434B"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource CheckBox.Pressed.BackgroundBrush}" TargetName="Border"/>
						</Trigger>-->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="BorderBrush" Value="{StaticResource Pullout.Disabled.ForegroundBrush}" TargetName="Border"/>
							<Setter Property="Stroke" Value="{StaticResource Pullout.Disabled.ForegroundBrush}" TargetName="CheckMark"/>
							<Setter Property="Foreground" Value="{StaticResource Pullout.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--DiscreteCheckBox style-->
	<Style x:Key="DiscreteCheckBoxStyle" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckBox.FocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource DiscreteCheckBox.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource DiscreteCheckBox.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource CheckBox.Static.ForegroundBrush}"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Border>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="16"/>
								<ColumnDefinition/>
							</Grid.ColumnDefinitions>
							<ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
							<Border Grid.Column="0" Margin="0,0,3,0">
								<Border.Background>
									<VisualBrush Opacity="1.0" Stretch="None">
										<VisualBrush.Visual>
											<Path
							Name="path"
							Data="M 0 5 L 3 10 10 0"
							Opacity="0.1"
							Stroke="#FF3838BA"
							StrokeEndLineCap="Round"
							StrokeLineJoin="Round"
							StrokeStartLineCap="Round"
							StrokeThickness="1.5"/>
										</VisualBrush.Visual>
									</VisualBrush>
								</Border.Background>
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="path" Property="Opacity" Value="1.0" />
							<Setter TargetName="path" Property="Stroke" Value="#FF70A16F" />
							<Setter TargetName="path" Property="StrokeThickness" Value="2.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RadioButton.FocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="0,0,0,0" Stroke="{StaticResource AccentColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard RadioButton -->
	<Style x:Key="StandardRadioButtonStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource RadioButton.FocusVisualStyle}"/>
		<Setter Property="Foreground" Value="{StaticResource RadioButton.Static.ForegroundBrush}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.BorderBrush}"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="16" Height="16">
								<Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
								<Ellipse Margin="4" x:Name="CheckMark" Fill="{StaticResource RadioButton.Static.GlyphBrush}"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Stroke" Value="{StaticResource RadioButton.Disabled.GlyphBrush}" TargetName="Ellipse_Border"/>
							<Setter Property="Fill" TargetName="CheckMark" Value="{StaticResource RadioButton.Disabled.GlyphBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource RadioButton.Disabled.ForegroundBrush}"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default RadioButton -->
	<Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource StandardRadioButtonStyle}"/>

	<!-- Channel RadioButton: This is used in channel properties -->
	<Style x:Key="ChanelRadioButtonStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource RadioButton.FocusVisualStyle}"/>
		<Setter Property="Foreground" Value="{StaticResource Channel.Static.ForegroundBrush}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource Channel.Static.ForegroundBrush}"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="16" Height="16">
								<Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
								<Ellipse Margin="4" x:Name="CheckMark" Fill="{StaticResource Channel.Static.ForegroundBrush}"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Stroke" Value="{StaticResource Channel.Disabled.ForegroundBrush}" TargetName="Ellipse_Border"/>
							<Setter Property="Fill" TargetName="CheckMark" Value="{StaticResource Channel.Disabled.ForegroundBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource Channel.Disabled.ForegroundBrush}"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Pullout RadioButton: This is used in channel properties -->
	<Style x:Key="PulloutRadioButtonStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource RadioButton.FocusVisualStyle}"/>
		<Setter Property="Foreground" Value="{StaticResource Pullout.ForegroundBrush}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource Pullout.ForegroundBrush}"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="16" Height="16">
								<Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
								<Ellipse Margin="4" x:Name="CheckMark" Fill="{StaticResource Pullout.ForegroundBrush}"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Stroke" Value="{StaticResource Pullout.Disabled.ForegroundBrush}" TargetName="Ellipse_Border"/>
							<Setter Property="Fill" TargetName="CheckMark" Value="{StaticResource Pullout.Disabled.ForegroundBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource Pullout.Disabled.ForegroundBrush}"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RadioButton.ToggleButtonStyle"  TargetType="{x:Type RadioButton}">
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True"/>
					<Condition Property="IsEnabled" Value="True"/>
				</MultiTrigger.Conditions>
				<Setter Property="Foreground" Value="{StaticResource SafetyMuteToggleButton.EnabledChecked.ForegroundBrush}"/>
			</MultiTrigger>
		</Style.Triggers>
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource RadioButton.FocusVisualStyle}"/>
		<Setter Property="Background" Value="{StaticResource Button.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="Black"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Background="Transparent" d:DesignWidth="57" RenderTransformOrigin="0.5,0.5">
						<BulletDecorator.RenderTransform>
							<TransformGroup>
								<ScaleTransform/>
								<SkewTransform AngleX="1.548"/>
								<RotateTransform/>
								<TranslateTransform X="0.473"/>
							</TransformGroup>
						</BulletDecorator.RenderTransform>
						<BulletDecorator.Bullet>
							<Grid x:Name="grid" Width="Auto" Height="Auto">
								<Border x:Name="Background" Background="{StaticResource Button.Static.BackgroundBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3"/>
								<Border x:Name="Selected" Background="{StaticResource SafetyMuteToggleButton.Selected.BackgroundBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Opacity="0"/>
								<Border x:Name="Hover"  BorderBrush="{StaticResource SafetyMuteToggleButton.MouseOver.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Opacity="0"/>
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" Margin="3,2" />
							</Grid>
						</BulletDecorator.Bullet>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.25"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Hover">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="grid">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Selected">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</BulletDecorator>


				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard Repeat Button - This is used by Standard ScrollBar for the up and down buttons -->
	<Style x:Key="StandardRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
		<Setter Property="Background" Value="{StaticResource RepeatButton.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource RepeatButton.Static.BorderBrush}"/>
		<Setter Property="BorderThickness" Value=".75"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid>
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{StaticResource RepeatButton.Focused.BorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource RepeatButton.MouseOver.BackgroundBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource RepeatButton.Pressed.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource RepeatButton.Pressed.BorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource RepeatButton.Disabled.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource RepeatButton.Disabled.BorderBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{StaticResource RepeatButton.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard Thumb - The Thumb is the draggable part of the Scrollbar -->
	<Style x:Key="StandardThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid Margin="0,0,0,0" x:Name="Grid">
						<Rectangle HorizontalAlignment="Stretch" x:Name="ClickRegion" VerticalAlignment="Stretch" Margin="-4,0" RadiusX="0" RadiusY="0" Fill="Transparent" IsHitTestVisible="True" StrokeThickness="0"/>
						<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="1" RadiusY="1" Fill="{StaticResource Thumb.Static.BackgroundBrush}" Stroke="{StaticResource Thumb.Static.BorderBrush}" StrokeThickness="0.75"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True"/>
						<Trigger Property="IsEnabled" Value="False"/>
						<Trigger Property="IsDragging" Value="True"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
	<Style x:Key="StandardScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid>
						<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard ScrollBar  This makes use of StandardThumb, StandardRepeatButtonStyle and StandardScrollRepeatButton -->
	<Style x:Key="StandardScrollBarStyle" TargetType="{x:Type ScrollBar}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}" >
					<Grid x:Name="GridRoot" Width="10" Background="{TemplateBinding Background}">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>

						<RepeatButton x:Name="DecreaseRepeat" Style="{StaticResource StandardRepeatButtonStyle}" Command="ScrollBar.LineUpCommand" Visibility="Collapsed">
							<Grid>
								<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness=".25" Data="M0.0,0.5 L2,0.5 1,0.0 z" HorizontalAlignment="Center" />
							</Grid>
						</RepeatButton>
						<Border Grid.RowSpan="3" BorderBrush="{Binding Background, ElementName=thumb}" BorderThickness="1" CornerRadius="2" >
							<Track x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
								<Track.Thumb>
									<Thumb x:Name="thumb" Style="{StaticResource StandardThumbStyle}"/>
								</Track.Thumb>
								<Track.IncreaseRepeatButton>
									<RepeatButton x:Name="PageUp" Style="{StaticResource StandardScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
								</Track.IncreaseRepeatButton>
								<Track.DecreaseRepeatButton>
									<RepeatButton x:Name="PageDown" Style="{StaticResource StandardScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
								</Track.DecreaseRepeatButton>
							</Track>

						</Border>

						<!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->

						<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{StaticResource StandardRepeatButtonStyle}" Command="ScrollBar.LineDownCommand" Visibility="Collapsed" >
							<Grid>
								<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness=".25" Data="M0.0,0 L1,1 2.0,0.0 z" HorizontalAlignment="Center" VerticalAlignment="Center" />
							</Grid>
						</RepeatButton>
					</Grid>

					<!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Horizontal">

							<!-- Rotate the ScrollBar from Vertical to Horizontal -->
							<Setter Property="LayoutTransform" TargetName="GridRoot">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>

							<!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
							<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

							<!-- Change the commands to do Horizontal commands -->
							<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
							<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default ScrollBar -->
	<Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource StandardScrollBarStyle}"/>

	<!-- Standard ScrollViewer 
	ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar 
	It is used by ListBox, MenuItem, ComboBox, and TreeView -->
	<Style x:Key="StandardScrollViewerStyle" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

						<!-- The visibility of the ScrollBars is controlled by the implementation of the control -->
						<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{StaticResource StandardScrollBarStyle}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
						<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{StaticResource StandardScrollBarStyle}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard ListBox - This uses StandardScrollViewerStyle to allow items to be scrolled and StandardListBoxItemStyle to define the look of each item -->
	<Style x:Key="StandardListBoxStyle" TargetType="{x:Type ListBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Background" Value="{StaticResource ListBox.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.BorderBrush}"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Grid>
						<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ScrollViewer Margin="1" Style="{StaticResource StandardScrollViewerStyle}" Focusable="false" Background="{TemplateBinding Background}">

							<!-- The StackPanel is used to display the children by setting IsItemsHost to be Trus -->
							<StackPanel Margin="2" IsItemsHost="true"/>

						</ScrollViewer>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource ListBox.Disabled.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListBox.Disabled.BorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard ListBoxItem - This is used for each Item in a ListBox. The item's content is placed in the ContentPresenter -->
	<Style x:Key="StandardListBoxItemStyle" d:IsControlPart="True" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Foreground" Value="{StaticResource ListBoxItem.Static.ForegroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource ListViewItem.MouseOver.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.MouseOver.BorderBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource ListViewItem.MouseOver.ForegroundBrush}"/>
							<!--<Setter Property="Visibility" TargetName="UpperHighlight" Value="Visible"/>-->
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="Selector.IsSelectionActive" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource ListViewItem.Selected.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.Selected.BorderBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource ListViewItem.Selected.ForegroundBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="Selector.IsSelectionActive" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource ListViewItem.SelectedInactive.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.SelectedInactive.BorderBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource ListViewItem.Selected.ForegroundBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="IsMouseOver" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource ListViewItem.MouseOverSelected.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.MouseOverSelected.BorderBrush}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource ListViewItem.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default ListBox-->
	<Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource StandardListBoxStyle}"/>

	<!-- ListBox style when listbox is used as a drop down -->
	<Style x:Key="DropDownListBoxStyle"  TargetType="{x:Type ListBox}" BasedOn="{StaticResource StandardListBoxStyle}">
		<Setter Property="Background" Value="{StaticResource ComboBox.Static.BackgroundBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource ComboBox.Static.ForegroundBrush}"/>
	</Style>

	<!-- Standard ListView -->
	<!--
	<Style x:Key="StandardListViewStyle" TargetType="{x:Type ListView}">
		<Setter Property="Background" Value="{StaticResource ListView.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ListView.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource ListView.Static.ForegroundBrush}"/>
	</Style>
	
	-->
	<!-- Default ListView -->
	<!--
	<Style TargetType="{x:Type ListView}" BasedOn="{StaticResource StandardListViewStyle}"/>

	-->
	<!-- Standard ListViewItem -->
	<!--
	<Style x:Key="StandardListViewItemStyle" TargetType="{x:Type ListViewItem}">
		<Setter Property="Foreground" Value="{StaticResource ListView.Static.ForegroundBrush}"/>
	</Style>

	-->
	<!-- Default ListViewItem -->
	<!--
	<Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource StandardListViewItemStyle}"/>-->

	<!-- Standard TreeView -->
	<Style x:Key="StandardTreeViewStyle" TargetType="{x:Type TreeView}">
		<Setter Property="Background" Value="{StaticResource TreeView.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TreeView.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource TreeView.Static.ForegroundBrush}"/>
		<Style.Resources>
			<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
					  Color="{DynamicResource ListControl.Selected.Background.Color}" />
			<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
					  Color="{DynamicResource ListControl.Selected.Text.Color}" />
			<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
					  Color="{DynamicResource ListControl.SelectedInactive.Background.Color}" />
			<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"
					  Color="{DynamicResource ListControl.Selected.Text.Color}" />
		</Style.Resources>
	</Style>

	<!-- Default TreeView -->
	<Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource StandardTreeViewStyle}"/>

	<!-- Standard TreeViewItem -->
	<Style x:Key="StandardTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Foreground" Value="{StaticResource TreeView.Static.ForegroundBrush}"/>
	</Style>

	<!-- Default TreeViewItem -->
	<Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource StandardTreeViewItemStyle}"/>

	<!-- Standard Expander ToggleButton - This Button is used by the Expander control. When it is toggled it switches visibility on the Up_Arrow and Down_Arrow -->
	<ControlTemplate x:Key="StandardExpanderToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
		<Grid>
			<Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" Stroke="{StaticResource ExpanderToggleButton.Static.BorderBrush}"/>
			<Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{StaticResource ExpanderToggleButton.Static.GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
			<Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{StaticResource ExpanderToggleButton.Static.GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Fill" Value="{StaticResource ExpanderToggleButton.MouseOver.BackgroundBrush}" TargetName="Rectangle"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter Property="Fill" Value="{StaticResource ExpanderToggleButton.Pressed.BackgroundBrush}" TargetName="Rectangle"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow"/>
				<Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Fill" Value="{StaticResource ExpanderToggleButton.Disabled.BackgroundBrush}" TargetName="Rectangle"/>
				<Setter Property="Stroke" Value="{StaticResource ExpanderToggleButton.Disabled.BorderBrush}" TargetName="Rectangle"/>
				<Setter Property="Foreground" Value="{StaticResource ExpanderToggleButton.Disabled.ForegroundBrush}"/>
				<Setter Property="Fill" Value="{StaticResource ExpanderToggleButton.Disabled.ForegroundBrush}" TargetName="Up_Arrow"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Standard Expander 
	 This uses the Standardr ExpanderToggleButton. It sets Visibility on the ContentPresenter to expand
	 Limitations : The Standard Expander only expands down -->
	<Style x:Key="StandardExpanderStyle" TargetType="{x:Type Expander}">
		<Setter Property="Background" Value="{StaticResource Expander.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Expander.Static.BorderBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*" x:Name="ContentRow"/>
						</Grid.RowDefinitions>
						<Border Grid.Row="0" x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,0,0">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="20"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<ToggleButton Template="{StaticResource StandardExpanderToggleButtonTemplate}" Background="{StaticResource ExpanderToggleButton.Static.BackgroundBrush}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True"/>
								<ContentPresenter Grid.Column="1" Margin="4" RecognizesAccessKey="True" ContentSource="Header"/>
							</Grid>
						</Border>
						<Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" Background="{StaticResource Expander.Content.BackgroundBrush}" BorderBrush="{StaticResource Expander.Content.BorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,2,2">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="True">
							<Setter Property="Visibility" Value="Visible" TargetName="ExpandSite"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{StaticResource Expander.Disabled.BackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource Expander.Disabled.BorderBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{StaticResource Expander.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard ComboBox Toggle Button - This is used in ComboBox to expand and collapse the ComboBox Popup-->
	<ControlTemplate x:Key="ComboBox.ToggleButton" TargetType="{x:Type ToggleButton}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
				<ColumnDefinition Width="20"/>
			</Grid.ColumnDefinitions>
			<Rectangle x:Name="bkg" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{StaticResource ComboBox.Static.BackgroundBrush}" Stroke="{StaticResource ComboBox.Static.BorderBrush}" StrokeThickness="1" Grid.ColumnSpan="2"/>
			<Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource ComboBox.Static.GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ComboBox.MouseOver.GlyphBrush}"/>
				<Setter TargetName="bkg" Property="Stroke" Value="{StaticResource ComboBox.MouseOver.BorderBrush}"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Fill" Value="{StaticResource ComboBox.Checked.BackgroundBrush}" TargetName="Arrow"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ComboBox.Disabled.GlyphBrush}"/>
				<Setter TargetName="bkg" Property="Fill" Value="{StaticResource ComboBox.Disabled.BackgroundBrush}"/>
				<Setter TargetName="bkg" Property="Stroke" Value="{StaticResource ComboBox.Disabled.BorderBrush}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- This is the area which contains the selected item in the ComboBox -->
	<ControlTemplate x:Key="ComboBox.TextBox" TargetType="{x:Type TextBox}">
		<!-- This must be named as PART_ContentHost -->
		<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
	</ControlTemplate>

	<!-- Standard ComboBox 
	This uses the NavigationComboBoxToggleButton to expand and collapse a Popup control
	StandardScrollViewerStyle to allow items to be scrolled and StandardComboBoxItemStyle to define the look of each item 
	The Popup shows a list of items in a StackPanel-->
	<Style x:Key="StandardComboBoxStyle" TargetType="{x:Type ComboBox}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Height" Value="22"/>
		<Setter Property="Padding" Value="3,0,23,0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Foreground" Value="{StaticResource ComboBox.Static.ForegroundBrush}"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisualStyle}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
						<ToggleButton Grid.Column="2" Template="{StaticResource ComboBox.ToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
						<ContentPresenter HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

						<!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
						<TextBox Visibility="Hidden" Template="{StaticResource ComboBox.TextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

						<!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the NavigationComboBoxToggleButton -->
						<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
							<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
								<Border x:Name="DropDownBorder" Background="{StaticResource ComboBox.DropDown.BackgroundBrush}" BorderBrush="{StaticResource ComboBox.DropDown.BorderBrush}" BorderThickness="1"/>
								<ScrollViewer Margin="4,6,4,6" Style="{StaticResource StandardScrollViewerStyle}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

									<!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>

								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- This forces the DropDown to have a minimum size if it is empty -->
						<Trigger Property="HasItems" Value="false">
							<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource ComboBox.Disabled.ForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
							<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
							<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false"/>
							<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
							<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default ComboBox -->
	<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource StandardComboBoxStyle}"/>

	<!-- Standard ComboBoxItem - This is used for each item inside of the ComboBox. You can change the selected color of each item below-->
	<Style x:Key="StandardComboBoxItemStyle" d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>

						<!-- Change IsHighlighted SelectedBackgroundBrush to set the selection color for the items -->
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" Value="{StaticResource ComboBoxItem.Highlighted.BackgroundBrush}" TargetName="Border"/>
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource ComboBoxItem.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Standard StandardProgressBarStyle
	 The template uses two Border controls to show the Track and Progress 
	 Limitations : It only supports a horizontal orientated ProgressBar -->
	<Style x:Key="StandardProgressBarStyle" TargetType="{x:Type ProgressBar}">
		<Setter Property="Background" Value="{StaticResource ProgressBar.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ProgressBar.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource ProgressBar.ForegroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid>

						<!-- This Border is the track. It must be named PART_Track -->
						<Border x:Name="PART_Track" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="2"/>

						<!-- This Border shows progress. It must be named PART_Indicator for the control to function -->
						<Border HorizontalAlignment="Left" x:Name="PART_Indicator" Background="{TemplateBinding Foreground}" BorderBrush="Transparent" BorderThickness="1" CornerRadius="2"/>

					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ProgressBar}"  BasedOn="{StaticResource StandardProgressBarStyle}"/>

	<!-- Standard TextBox -->
	<Style x:Key="StandardTextBoxStyle" TargetType="{x:Type TextBox}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Background" Value="{StaticResource TextBox.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource TextBox.Static.ForegroundBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="Height" Value="22"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="border" Value="{StaticResource TextBox.Disabled.BackgroundBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource TextBox.Disabled.ForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.BorderBrush}"/>
						</Trigger>
						<Trigger Property="Validation.HasError" Value="True">
							<Setter Property="BorderBrush" Value="{StaticResource Text.ErrorBrush}"/>
							<Setter Property="BorderThickness" Value="1" />
							<Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
					<Condition Property="IsSelectionActive" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="SelectionBrush" Value="{StaticResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
			</MultiTrigger>
		</Style.Triggers>
	</Style>

	<!-- Default TextBox -->
	<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource StandardTextBoxStyle}"/>

	<!-- Standard Separator - This template is used for a Separator in a menu -->
	<Style x:Key="StandardSeparatorStyle" TargetType="{x:Type Separator}">
		<Setter Property="Height" Value="1"/>
		<Setter Property="Margin" Value="0,2,0,2"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="BorderBrush" Value="{StaticResource Separator.Static.BorderBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default Separator -->
	<Style TargetType="{x:Type Separator}" BasedOn="{StaticResource StandardSeparatorStyle}"/>

	<!-- ******* SafariSwitch ******* -->

	<ControlTemplate x:Key="HorizontalThumbTemplate" TargetType="Thumb">
		<Grid Background="Transparent">
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualState x:Name="Normal" />
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimation Duration="0"
											 Storyboard.TargetName="BackgroundAnimation"
											 Storyboard.TargetProperty="Opacity"
											 To="0.05" />
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimation Duration="0"
											 Storyboard.TargetName="BackgroundAnimation"
											 Storyboard.TargetProperty="Opacity"
											 To="0.25" />
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimation Duration="0"
											 Storyboard.TargetName="DisabledVisualElement"
											 Storyboard.TargetProperty="Opacity"
											 To=".55" />
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimation Duration="0"
											 Storyboard.TargetName="FocusVisualElement"
											 Storyboard.TargetProperty="Opacity"
											 To="0.05" />
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unfocused" />
				</VisualStateGroup>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Unchecked" />
					<VisualState x:Name="Checked">
						<Storyboard>
							<DoubleAnimation Duration="0" To="-1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="path"/>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<!--<ToggleSwitchBorders:OuterGlowBorder Background="Transparent"
									 BorderThickness="0"
									 CornerRadius="4"
									 OuterGlowColor="Black"
									 OuterGlowOpacity="0.15"
									 OuterGlowSize="4"
									 ShadowCornerRadius="8">
				<Grid>
					<ToggleSwitchBorders:ClippingBorder x:Name="Background"
											Background="White"
											BorderBrush="{TemplateBinding BorderBrush}"
											BorderThickness="{TemplateBinding BorderThickness}"
											CornerRadius="4">
						<Border BorderBrush="#FFEBEBEB" BorderThickness="1" CornerRadius="3" Background="{TemplateBinding Background}">
							<Path x:Name="path" Data="M3.6,2.6 L10,2.6 L10,6.6 L3.6,6.6 z M10,0 L15.5,4.6 L10,9.4 z" Fill="#AA767676" Stretch="Fill" StrokeThickness="0" RenderTransformOrigin="0.5,0.5" Margin="7,5" >
								<Path.RenderTransform>
									<ScaleTransform/>
								</Path.RenderTransform>
							</Path>
						</Border>
					</ToggleSwitchBorders:ClippingBorder>
					<ToggleSwitchBorders:ClippingBorder x:Name="BackgroundAnimation"
											Background="Black"
											BorderBrush="Black"
											BorderThickness="{TemplateBinding BorderThickness}"
											CornerRadius="4"
											Opacity="0" />
					<Rectangle x:Name="FocusVisualElement"
							   Margin="1"
							   IsHitTestVisible="True"
							   Opacity="0"
							   RadiusX="4"
							   RadiusY="4"
							   StrokeThickness="1" />
					<Rectangle x:Name="DisabledVisualElement"
						Fill="#FFFFFFFF"
						Opacity="0"
						RadiusX="4"
						RadiusY="4" IsHitTestVisible="False" />
				</Grid>
			</ToggleSwitchBorders:OuterGlowBorder>-->
		</Grid>
	</ControlTemplate>

	<ControlTemplate x:Key="SafariThumbControlTemplate" TargetType="Thumb">
		<Grid Background="Transparent">
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimation Duration="0" To="0.05" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundAnimation"/>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimation Duration="0" To="0.25" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundAnimation"/>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimation Duration="0" To=".55" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement"/>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimation Duration="0" To="0.05" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusVisualElement"/>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unfocused"/>
				</VisualStateGroup>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Unchecked"/>
					<VisualState x:Name="Checked"/>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<!--<ToggleSwitchBorders:OuterGlowBorder OuterGlowSize="4" OuterGlowOpacity="0.15" BorderThickness="0" OuterGlowColor="Black" Background="Transparent" CornerRadius="2" ShadowCornerRadius="4" IsTabStop="False" >
				<Grid>
					<ToggleSwitchBorders:ClippingBorder x:Name="Background" BorderBrush="#FF656565" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" IsTabStop="False" Background="{TemplateBinding Background}"/>
					<ToggleSwitchBorders:ClippingBorder x:Name="BackgroundAnimation" Background="Black" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Black" CornerRadius="2" IsTabStop="False"/>
					<Rectangle x:Name="DisabledVisualElement" Fill="White" IsHitTestVisible="false" Opacity="0" RadiusY="2" RadiusX="2"/>
					<Rectangle x:Name="FocusVisualElement" IsHitTestVisible="false" Margin="1" Opacity="0" RadiusY="2" RadiusX="2" StrokeThickness="1"/>
				</Grid>
			</ToggleSwitchBorders:OuterGlowBorder>-->
		</Grid>
	</ControlTemplate>

	<!--<Style x:Key="SafariSwitchStyle" TargetType="ToggleSwitch:HorizontalToggleSwitch">
		<Setter Property="Height" Value="20"/>
		<Setter Property="BorderBrush" Value="#FF6C6C6C"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="0,4"/>
		<Setter Property="UncheckedForeground" Value="#FF3C3C3C"/>
		<Setter Property="CheckedForeground" Value="#FF3C3C3C" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="ThumbSize" Value="30" />
		<Setter Property="ThumbTemplate" Value="{StaticResource HorizontalThumbTemplate}"/>
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
					<GradientStop Color="#FF656565" Offset="0"/>
					<GradientStop Color="#FFA5A5A5" Offset="1"/>
					<GradientStop Color="#FF797979" Offset="0.095"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="ThumbBrush">
			<Setter.Value>
				<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
					<GradientStop Color="#FFE1E1E1" Offset="1"/>
					<GradientStop Color="#FFFBFBFB"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleSwitch:HorizontalToggleSwitch">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledOverlay">
											<DiscreteObjectKeyFrame KeyTime="0">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OffLabel">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OnLabel">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver"/>
								<VisualState x:Name="Pressed"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.10" To="Unchecked"/>
									<VisualTransition GeneratedDuration="0:0:0.10" To="Checked"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Checked"/>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="DraggingChecked"/>
								<VisualState x:Name="DraggingUnchecked"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ToggleSwitchUtils:ActualSizePropertyProxy x:Name="ActualSizeProxy" Element="{Binding Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" IsHitTestVisible="False"/>
						<ContentControl x:Name="OffLabel" 
								Content="{TemplateBinding UncheckedContent}" 
								HorizontalContentAlignment="Center" 
								VerticalContentAlignment="Center"
								Template="{TemplateBinding ContentTemplate}"
								Foreground="{TemplateBinding UncheckedForeground}" IsTabStop="False" Padding="3,0,6,0" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" Cursor="Hand" VerticalAlignment="Center" FontStyle="{TemplateBinding FontStyle}" Focusable="False" Height="Auto" HorizontalAlignment="Stretch" />
						<ToggleSwitchBorders:ClippingBorder x:Name="SwitchRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" IsTabStop="False" Grid.Column="1" Background="{TemplateBinding Background}" Cursor="Hand" Width="60" >
							<Canvas x:Name="SwitchTrack" Cursor="Hand" Height="{TemplateBinding Height}" Margin="0,-1,0,0">
								<Thumb x:Name="SwitchThumb" 
										Background="{TemplateBinding ThumbBrush}" 
										Template="{StaticResource SafariThumbControlTemplate}" 
										Cursor="Hand" 
										Height="{Binding ActualHeightValue, ElementName=ActualSizeProxy}" 
										Width="{TemplateBinding ThumbSize}"
										HorizontalAlignment="Left" IsTabStop="False"/>
							</Canvas>
						</ToggleSwitchBorders:ClippingBorder>
						<ContentControl x:Name="OnLabel" 
								Content="{TemplateBinding CheckedContent}"
								HorizontalContentAlignment="Center" 
								VerticalContentAlignment="Center"
								Template="{TemplateBinding ContentTemplate}" 
								Foreground="{TemplateBinding CheckedForeground}" IsTabStop="False" Grid.Column="2" Padding="6,0,3,0" FontWeight="{TemplateBinding FontWeight}"  FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" Cursor="Hand" VerticalAlignment="Center" FontStyle="{TemplateBinding FontStyle}" Focusable="False" Height="Auto" Margin="0"/>
						<Border x:Name="DisabledOverlay" Background="#AAEEEEEE" Visibility="Collapsed" CornerRadius="4" Height="Auto" Grid.Column="1" Grid.ColumnSpan="1"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Width" Value="Auto"/>
	</Style>-->

	<Style x:Key="FilterButtonStyle" x:Shared="False" TargetType="{x:Type Button}" BasedOn="{StaticResource StandardButtonStyle}">
		<Setter Property="Height" Value="Auto"/>
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="Content">
			<Setter.Value>
				<Path Data="M389.60903,533.61658 L403.73379,533.66458 398.10887,540.66145 397.15625,547.36446 395.36572,545.62543 395.23392,540.5254 z" Fill="#FF595959" Height="10" Stretch="Fill" Stroke="Black" Width="10" StrokeLineJoin="Round"/>
			</Setter.Value>
		</Setter>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="MinHeight" Value="0"/>
	</Style>

	<!-- ************************** -->
	<!-- ******* NAVIGATION ******* -->
	<!-- ************************** -->

	<Style x:Key="NavigationFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{StaticResource AccentColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NavSelectorStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="FontSize" Value="13"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="FontStretch" Value="Expanded"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.Static.ForegroundBrush}"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource NavigationFocusVisual}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedMouseOver">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedPressed">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="textBlock">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangleChecked">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedChecked">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="Background" >
							<Grid >
								<Grid.RowDefinitions>
									<RowDefinition Height="25"/>
								</Grid.RowDefinitions>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="8" />
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Rectangle x:Name="SelectedChecked" Fill="{StaticResource Navigation.Checked.BackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
								<Rectangle x:Name="SelectedPressed" Fill="{StaticResource Navigation.MouseOver.BackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
								<Rectangle x:Name="SelectedMouseOver" Fill="{StaticResource Navigation.MouseOver.BackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
								<Rectangle x:Name="rectangleChecked" Fill="{StaticResource Navigation.Checked.Edge.BackgroundBrush}" Opacity="0" Width="5" HorizontalAlignment="Left"/>
								<ContentPresenter x:Name="textBlock" Grid.Column="1" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Foreground" Value="{StaticResource Navigation.NavSelector.Selected.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NavSelectorDefaultStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="FontSize" Value="13"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="FontStretch" Value="Expanded"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.Static.ForegroundBrush}"/>
		<Setter Property="TextElement.FontWeight" Value="Bold"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedMouseOver">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedPressed">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="textBlock">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangleChecked">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedChecked">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="Background" >
							<Grid >
								<Grid.RowDefinitions>
									<RowDefinition Height="25"/>
								</Grid.RowDefinitions>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="8" />
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Rectangle x:Name="SelectedChecked" Fill="{StaticResource Navigation.Checked.BackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
								<Rectangle x:Name="SelectedPressed" Fill="{StaticResource Navigation.MouseOver.BackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
								<Rectangle x:Name="SelectedMouseOver" Fill="{StaticResource Navigation.MouseOver.BackgroundBrush}" Opacity="0" Grid.ColumnSpan="2"/>
								<Rectangle x:Name="rectangleChecked" Fill="{StaticResource Navigation.Checked.Edge.BackgroundBrush}" Opacity="0" Width="5" HorizontalAlignment="Left"/>
								<ContentPresenter x:Name="textBlock" Grid.Column="1" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Foreground" Value="White"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NavigationComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource Navigation.ComboBox.Static.BorderBrush}">
						<Border x:Name="splitBorder" Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" Background="{StaticResource ComboBox.Static.Splitborder.BackgroundBrush}" BorderBrush="{StaticResource ComboBox.Static.Splitborder.BorderBrush}" CornerRadius="2">
							<Path x:Name="arrow" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{StaticResource Navigation.ComboBox.Static.GlyphBrush}" Data="F1 M1.2049007E-14,0.82449998 L4.2816667,5.4166666 0.23966667,5.375 0.19833333,6.6059422 C0.19833333,6.6059422 8.24,6.6059422 8.24,6.6476088 8.24,6.7497952 8.24,5.5416666 8.24,5.4166666 8.24,5.4166666 4.2208955,5.3964561 4.24,5.375 4.9162882,4.6154642 8.2552626,1.0697604 8.5004999,0.82449998 L8.5004999,0.83432906 -2.4848522E-15,0.83432906 1.2049007E-14,0.82449998 z" Height="6.146" Width="9.86" Stretch="Fill"/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource Navigation.ComboBox.MouseOver.GlyphBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource Navigation.ComboBox.Pressed.GlyphBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource Navigation.ComboBox.Disabled.GlyphBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RoomContextToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource Navigation.ComboBox.Static.BorderBrush}">
						<Border x:Name="splitBorder" Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" Background="{StaticResource ComboBox.Static.Splitborder.BackgroundBrush}" BorderBrush="{StaticResource ComboBox.Static.Splitborder.BorderBrush}" CornerRadius="2">
							<Path x:Name="arrow" VerticalAlignment="Center" HorizontalAlignment="Center" 
								  Fill="{StaticResource Navigation.ComboBox.Static.GlyphBrush}" 
								  Data="F1 M1.2049007E-14,0.82449998 L4.2816667,5.4166666 0.23966667,5.375 0.19833333,6.6059422 C0.19833333,6.6059422 8.24,6.6059422 8.24,6.6476088 8.24,6.7497952 8.24,5.5416666 8.24,5.4166666 8.24,5.4166666 4.2208955,5.3964561 4.24,5.375 4.9162882,4.6154642 8.2552626,1.0697604 8.5004999,0.82449998 L8.5004999,0.83432906 -2.4848522E-15,0.83432906 1.2049007E-14,0.82449998 z" Height="6.146" Width="9.86" Stretch="Fill"/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource Navigation.ComboBox.MouseOver.GlyphBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource Navigation.ComboBox.Pressed.GlyphBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource Navigation.ComboBox.Disabled.GlyphBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<EventTrigger RoutedEvent="Click">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
								<DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
							</BooleanAnimationUsingKeyFrames>
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</Style.Triggers>
	</Style>

	<!-- Navigation Combobox Single Entry Template -->
	<ControlTemplate x:Key="NavigationComboBoxSingleItemTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" Margin="0,0,0,2">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>
			<Border SnapsToDevicePixels="true" >
				<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
			</Border>
			<StackPanel Grid.ColumnSpan="1" Grid.Row="1">
				<Line X2="1" Stroke="{StaticResource Navigation.AccentBrush}" Stretch="Fill"/>
				<Line X2="1" Stretch="Fill" Height="2"/>
				<Line X2="1" Stroke="{StaticResource Navigation.AccentBrush}" Stretch="Fill"/>
			</StackPanel>
		</Grid>
	</ControlTemplate>

	<!-- Navigation Combobox template-->
	<ControlTemplate x:Key="NavigationComboBoxTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" Margin="0,0,0,2">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition MinWidth="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Right" PopupAnimation="Scroll">
				<Border x:Name="dropDownBorder" BorderThickness="1" BorderBrush="{StaticResource Navigation.NavSelector.Static.BorderBrush}" Background="{StaticResource Navigation.NavSelector.Static.BackgroundBrush}">
					<ScrollViewer x:Name="DropDownScrollViewer">
						<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
							<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
								<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
							</Canvas>
							<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Grid>
					</ScrollViewer>
				</Border>
			</Popup>
			<Border SnapsToDevicePixels="true" Grid.ColumnSpan="2" >
				<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
			<ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource NavigationComboBoxToggleButton}" Grid.Column="1" HorizontalAlignment="Right" />
			<StackPanel Grid.ColumnSpan="2" Grid.Row="1">
				<Line X2="1" Stroke="{StaticResource Navigation.AccentBrush}" Stretch="Fill"/>
				<Line X2="1" Stretch="Fill" Height="2"/>
				<Line X2="1" Stroke="{StaticResource Navigation.AccentBrush}" Stretch="Fill"/>
			</StackPanel>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true"/>
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
				<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
				<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="NavigationComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Padding" Value="4,1"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.NavSelector.Content.ForegroundBrush}" />
		<Setter Property="FontWeight" Value="Medium" />
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource NavigationFocusVisual}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter x:Name="Cp" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							<Setter Property="HorizontalAlignment" TargetName="Cp" Value="Center" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsKeyboardFocused" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.MouseOver.BackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.MouseOver.BorderBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="False"/>
								<Condition Property="IsKeyboardFocused" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.Selected.BackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.Selected.BorderBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.SelectedMouseOver.BackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.SelectedMouseOver.BorderBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="False"/>
								<Condition Property="IsKeyboardFocused" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.SelectedNoFocus.BackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.SelectedNoFocus.BorderBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="False"/>
								<Condition Property="IsKeyboardFocused" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.Focus.BorderBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsKeyboardFocused" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.MouseOverFocus.BackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Navigation.ComboBoxItem.MouseOverFocus.BorderBrush}"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NavigationPanelSelectorStyle" TargetType="{x:Type ComboBox}">
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.NavSelector.Static.ForegroundBrush}"/>
		<Setter Property="FontStretch" Value="Expanded"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisualStyle}"/>
		<Setter Property="Template" Value="{StaticResource NavigationComboBoxTemplate}"/>
		<Setter Property="ItemContainerStyle" Value="{StaticResource NavigationComboBoxItemStyle }"/>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Path=Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
				<Setter Property="Template" Value="{StaticResource NavigationComboBoxSingleItemTemplate}"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="NavContentHeaderStyle" TargetType="{x:Type HeaderedContentControl}">
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontStretch" Value="Expanded"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.NavSelector.Static.ForegroundBrush}"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<StackPanel>
						<Border SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="false" Width="{TemplateBinding Width}">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<StackPanel>
									<ContentPresenter ContentSource="Header" Margin="6,3"/>
									<Line X2="1" Stroke="{StaticResource Navigation.AccentBrush}" Stretch="Fill" Height="2" Margin="0,0,0,1"/>
								</StackPanel>
							</Grid>
						</Border>
						<ContentPresenter />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NavFooterContentHeaderStyle" TargetType="{x:Type HeaderedContentControl}">
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontStretch" Value="Expanded"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.NavSelector.Static.ForegroundBrush}"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<StackPanel>
						<Border Height="4" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource Navigation.AccentBrush}" IsHitTestVisible="false" Width="{TemplateBinding Width}" Margin="0,1,0,0"/>
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NavTitleHeaderStyle" TargetType="{x:Type HeaderedContentControl}">
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontStretch" Value="Expanded"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.NavSelector.Static.ForegroundBrush}"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<StackPanel >
						<Border SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="false" Width="{TemplateBinding Width}" Margin="0,0,0,2">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<ContentPresenter ContentSource="Header" Margin="6,3"/>
								<StackPanel VerticalAlignment="Bottom" Grid.ColumnSpan="1" Grid.Row="1">
									<Line X2="1" Stroke="{StaticResource Navigation.AccentBrush}" Stretch="Fill"/>
									<Line X2="1" Stretch="Fill" Height="2"/>
									<Line X2="1" Stroke="{StaticResource Navigation.AccentBrush}" Stretch="Fill"/>
								</StackPanel>
							</Grid>
						</Border>
						<ContentPresenter />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Expander Style -->

	<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid Background="Transparent" SnapsToDevicePixels="False">
							<Grid.RowDefinitions>
								<RowDefinition Height="19"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<Grid>
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="-90"/>
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
							</Grid>
							<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid Background="Transparent" SnapsToDevicePixels="False">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="19"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid>
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="180"/>
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
							</Grid>
							<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid Background="Transparent" SnapsToDevicePixels="False">
							<Grid.RowDefinitions>
								<RowDefinition Height="19"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<Grid>
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="90"/>
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
							</Grid>
							<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ExpanderHeaderFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid Background="Transparent" SnapsToDevicePixels="False">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="12"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Path x:Name="arrow" Data="M0.0,9.0 L4.5,4.5 0.0,0.0 z" HorizontalAlignment="Left" VerticalAlignment="Center" Fill="White" Stroke="White"/>
							<ContentPresenter Grid.Column="1" HorizontalAlignment="Stretch" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Data" TargetName="arrow" Value="M1.0,7.0 L7.0,1.0 7.0,7.0 z"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Navigation.MouseOver.BackgroundBrush}"/>
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource Navigation.MouseOver.BackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NavExpanderStyle" TargetType="{x:Type Expander}">
		<Setter Property="FontSize" Value="13"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.Expander.Static.ForegroundBrush}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
						<DockPanel>
							<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisualStyle}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="-1" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="true">
							<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Right">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Up">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Left">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NavExpanderHighlightStyle" TargetType="{x:Type Expander}">
		<Setter Property="FontSize" Value="13"/>
		<Setter Property="Foreground" Value="{StaticResource Navigation.Checked.Edge.BackgroundBrush}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
						<DockPanel>
							<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisualStyle}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="-1" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="true">
							<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Right">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Up">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Left">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Navigation Add Button Style -->
	<Style x:Key="NavAddButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource NavigationFocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource Navigation.AddButton.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Navigation.AddButton.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Margin" Value="4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Ellipse x:Name="border" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
						<Path x:Name="contentPresenter"  Data="M0,4 L8,4 M4,0 L4,8" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="Black" Margin="3" StrokeThickness="1.25"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter Property="Stroke" TargetName="border" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="border" Value="{StaticResource Navigation.AddButton.MouseOver.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="border" Value="{StaticResource Navigation.AddButton.MouseOver.BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="border" Value="{StaticResource Navigation.AddButton.Pressed.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="border" Value="{StaticResource Navigation.AddButton.Pressed.BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="border" Value="{StaticResource Navigation.AddButton.Disabled.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="border" Value="{StaticResource Navigation.AddButton.Disabled.BorderBrush}"/>
							<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Navigation.AddButton.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Navigation Clone Button Style -->
	<Style x:Key="NavCloneButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource NavigationFocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource Navigation.AddButton.Static.BackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Navigation.AddButton.Static.BorderBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Margin" Value="4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Path x:Name="bottomSquare" Data="M0,3 L10,3 10,13 0,13 z" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"/>
						<Path x:Name="topSquare" Data="M3,0 L13,0 13,10 3,10 z" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter Property="Stroke" TargetName="bottomSquare" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
							<Setter Property="Stroke" TargetName="topSquare" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="bottomSquare" Value="{StaticResource Navigation.AddButton.MouseOver.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="bottomSquare" Value="{StaticResource Navigation.AddButton.MouseOver.BorderBrush}"/>
							<Setter Property="Fill" TargetName="topSquare" Value="{StaticResource Navigation.AddButton.MouseOver.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="topSquare" Value="{StaticResource Navigation.AddButton.MouseOver.BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="bottomSquare" Value="{StaticResource Navigation.AddButton.Pressed.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="bottomSquare" Value="{StaticResource Navigation.AddButton.Pressed.BorderBrush}"/>
							<Setter Property="Fill" TargetName="topSquare" Value="{StaticResource Navigation.AddButton.Pressed.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="topSquare" Value="{StaticResource Navigation.AddButton.Pressed.BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="bottomSquare" Value="{StaticResource Navigation.AddButton.Disabled.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="bottomSquare" Value="{StaticResource Navigation.AddButton.Disabled.BorderBrush}"/>
							<Setter Property="Fill" TargetName="topSquare" Value="{StaticResource Navigation.AddButton.Disabled.BackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="topSquare" Value="{StaticResource Navigation.AddButton.Disabled.BorderBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ********************** -->
	<!-- ******* LABELS ******* -->
	<!-- ********************** -->

	<!-- Standard Label -->
	<Style x:Key="StandardLabelStyle" TargetType="{x:Type Label}">
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Padding" Value="5"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Top"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource StandardView.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default Label -->
	<Style TargetType="{x:Type Label}" BasedOn="{StaticResource StandardLabelStyle}"/>

	<!-- Legend Label-->
	<Style x:Key="LegendLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource StandardLabelStyle}">
		<Setter Property="FontSize" Value="9"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Label.FontFamily" Value="Trebuchet MS"></Setter>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
	</Style>

	<Style x:Key="LabelNormal1Style" TargetType="{x:Type Label}" BasedOn="{StaticResource StandardLabelStyle}">
		<Setter Property="FontSize" Value="18"/>
		<Setter Property="FontWeight" Value="Medium"/>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
	</Style>

	<Style x:Key="LabelNormal2Style" TargetType="{x:Type Label}" BasedOn="{StaticResource StandardLabelStyle}">
		<Setter Property="FontSize" Value="15"/>
		<Setter Property="FontWeight" Value="Medium"/>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
	</Style>

	<Style x:Key="LabelNormal3Style" TargetType="{x:Type Label}" BasedOn="{StaticResource StandardLabelStyle}">
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
	</Style>

	<Style x:Key="LabelNormal4Style" TargetType="{x:Type Label}" BasedOn="{StaticResource StandardLabelStyle}">
		<Setter Property="FontSize" Value="10"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
	</Style>

	<Style x:Key="LabelErrorStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource StandardLabelStyle}">
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Foreground" Value="{StaticResource Text.ErrorBrush}"/>
	</Style>

	<!-- ************************** -->
	<!-- ******* TEXTBLOCKS ******* -->
	<!-- ************************** -->

	<!-- Standard TextBlock -->
	<Style x:Key="StandardTextBlockStyle" TargetType="{x:Type TextBlock}">
		<Setter Property="TextWrapping" Value="NoWrap"/>
		<Setter Property="TextTrimming" Value="None"/>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource StandardView.Disabled.ForegroundBrush}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Default TextBlock -->
	<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandardTextBlockStyle}"/>

	<Style x:Key="TextBlockNormal1Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandardTextBlockStyle}">
		<Setter Property="FontSize" Value="18"/>
		<Setter Property="FontWeight" Value="Medium"/>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
	</Style>

	<Style x:Key="TextBlockNormal2Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandardTextBlockStyle}">
		<Setter Property="FontSize" Value="15"/>
		<Setter Property="FontWeight" Value="Medium"/>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
	</Style>

	<Style x:Key="TextBlockNormal3Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandardTextBlockStyle}">
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Foreground" Value="{StaticResource StandardView.ForegroundBrush}"/>
	</Style>

	<Style x:Key="TextBlockErrorStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandardTextBlockStyle}">
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Foreground" Value="{StaticResource Text.ErrorBrush}"/>
	</Style>

	<!-- Pullout TextBlock -->
	<Style x:Key="TextBlockPullout1Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandardTextBlockStyle}">
		<Setter Property="FontSize" Value="18"/>
		<Setter Property="FontWeight" Value="Medium"/>
		<Setter Property="Foreground" Value="{StaticResource Pullout.ForegroundBrush}"/>
	</Style>

	<Style x:Key="TextBlockPullout2Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandardTextBlockStyle}">
		<Setter Property="FontSize" Value="15"/>
		<Setter Property="FontWeight" Value="Medium"/>
		<Setter Property="Foreground" Value="{StaticResource Pullout.ForegroundBrush}"/>
	</Style>

	<Style x:Key="TextBlockPullout3Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandardTextBlockStyle}">
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Foreground" Value="{StaticResource Pullout.ForegroundBrush}"/>
	</Style>

	<!-- Standard ListViewItem -->
	<Style x:Key="StandardListViewItemStyle" TargetType="{x:Type ListViewItem}">
		<Setter Property="Background" Value="{StaticResource ListViewItem.Static.BackgroundBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource ListViewItem.Static.ForegroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.Static.BorderBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Margin" Value="0,0,0,1"/>
		<Setter Property="Padding" Value="5,2,5,2"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListViewItem}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2" SnapsToDevicePixels="true">
						<Border x:Name="InnerBorder" BorderThickness="1" CornerRadius="1">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition MaxHeight="11"/>
									<RowDefinition/>
								</Grid.RowDefinitions>
								<!--<Rectangle x:Name="UpperHighlight" Fill="#75FFFFFF" Visibility="Collapsed"/>-->
								<GridViewRowPresenter Grid.RowSpan="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Grid>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource ListViewItem.MouseOver.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.MouseOver.BorderBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource ListViewItem.MouseOver.ForegroundBrush}"/>
							<!--<Setter Property="Visibility" TargetName="UpperHighlight" Value="Visible"/>-->
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="Selector.IsSelectionActive" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource ListViewItem.Selected.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.Selected.BorderBrush}"/>
							<Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF"/>
							<Setter Property="Foreground" Value="{StaticResource ListViewItem.Selected.ForegroundBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="Selector.IsSelectionActive" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource ListViewItem.SelectedInactive.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.SelectedInactive.BorderBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource ListViewItem.Selected.ForegroundBrush}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="IsMouseOver" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource ListViewItem.MouseOverSelected.BackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItem.MouseOverSelected.BorderBrush}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource ListViewItem.Disabled.ForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default ListViewItem -->
	<!--<Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource StandardListViewItemStyle}"/>-->

	<!-- Standard ListViewItem-->
	<Style x:Key="StandardListViewStyle" TargetType="{x:Type ListView}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<!--<Setter Property="ItemContainerStyle" Value="{StaticResource StandardListViewItemStyle}"/>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListView">
					<Border Name="Border" BorderThickness="1" Background="{StaticResource ListView.Static.BackgroundBrush}" BorderBrush="{StaticResource ListView.Static.BorderBrush}">
						<ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsGrouping"  Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ListView.Disabled.BackgroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Default ListViewItem -->
	<!--<Style TargetType="{x:Type ListView}" BasedOn="{StaticResource StandardListViewStyle}"/>-->

	<Style x:Key="BackgroundOn" TargetType="{x:Type Border}">
		<Setter Property="BorderBrush" Value="{DynamicResource ListBox.Static.BorderBrush}"/>
		<Setter Property="Background" Value="{DynamicResource Container.Header.BackgroundBrush}"/>
	</Style>
	<Style x:Key="BackgroundOff" TargetType="{x:Type Border}">
		<Setter Property="BorderBrush" Value="{DynamicResource ListBox.Static.BorderBrush}"/>
		<Setter Property="Background" Value="Transparent"/>
	</Style>

</ResourceDictionary>